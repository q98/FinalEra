import { __extends } from "tslib";
import { Observable } from "../Misc/observable";
import { Vector3, Matrix } from "../Maths/math.vector";
import { Color3 } from '../Maths/math.color';
import { TransformNode } from "../Meshes/transformNode";
import { PlaneBuilder } from "../Meshes/Builders/planeBuilder";
import { PointerDragBehavior } from "../Behaviors/Meshes/pointerDragBehavior";
import { Gizmo } from "./gizmo";
import { UtilityLayerRenderer } from "../Rendering/utilityLayerRenderer";
import { StandardMaterial } from "../Materials/standardMaterial";
/**
 * Single plane drag gizmo
 */
var PlaneDragGizmo = /** @class */ (function (_super) {
    __extends(PlaneDragGizmo, _super);
    /**
     * Creates a PlaneDragGizmo
     * @param gizmoLayer The utility layer the gizmo will be added to
     * @param dragPlaneNormal The axis normal to which the gizmo will be able to drag on
     * @param color The color of the gizmo
     */
    function PlaneDragGizmo(dragPlaneNormal, color, gizmoLayer, parent) {
        if (color === void 0) { color = Color3.Gray(); }
        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer; }
        if (parent === void 0) { parent = null; }
        var _this = _super.call(this, gizmoLayer) || this;
        _this._pointerObserver = null;
        /**
         * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)
         */
        _this.snapDistance = 0;
        /**
         * Event that fires each time the gizmo snaps to a new location.
         * * snapDistance is the the change in distance
         */
        _this.onSnapObservable = new Observable();
        _this._isEnabled = false;
        _this._parent = null;
        _this._parent = parent;
        // Create Material
        _this._coloredMaterial = new StandardMaterial("", gizmoLayer.utilityLayerScene);
        _this._coloredMaterial.diffuseColor = color;
        _this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));
        _this._hoverMaterial = new StandardMaterial("", gizmoLayer.utilityLayerScene);
        _this._hoverMaterial.diffuseColor = color.add(new Color3(0.3, 0.3, 0.3));
        // Build plane mesh on root node
        _this._plane = PlaneDragGizmo._CreatePlane(gizmoLayer.utilityLayerScene, _this._coloredMaterial);
        _this._plane.lookAt(_this._rootMesh.position.add(dragPlaneNormal));
        _this._plane.scaling.scaleInPlace(1 / 3);
        _this._plane.parent = _this._rootMesh;
        var currentSnapDragDistance = 0;
        var tmpVector = new Vector3();
        var tmpSnapEvent = { snapDistance: 0 };
        // Add dragPlaneNormal drag behavior to handle events when the gizmo is dragged
        _this.dragBehavior = new PointerDragBehavior({ dragPlaneNormal: dragPlaneNormal });
        _this.dragBehavior.moveAttached = false;
        _this._rootMesh.addBehavior(_this.dragBehavior);
        var localDelta = new Vector3();
        var tmpMatrix = new Matrix();
        _this.dragBehavior.onDragObservable.add(function (event) {
            if (_this.attachedMesh) {
                // Convert delta to local translation if it has a parent
                if (_this.attachedMesh.parent) {
                    _this.attachedMesh.parent.computeWorldMatrix().invertToRef(tmpMatrix);
                    tmpMatrix.setTranslationFromFloats(0, 0, 0);
                    Vector3.TransformCoordinatesToRef(event.delta, tmpMatrix, localDelta);
                }
                else {
                    localDelta.copyFrom(event.delta);
                }
                // Snapping logic
                if (_this.snapDistance == 0) {
                    _this.attachedMesh.position.addInPlace(localDelta);
                }
                else {
                    currentSnapDragDistance += event.dragDistance;
                    if (Math.abs(currentSnapDragDistance) > _this.snapDistance) {
                        var dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / _this.snapDistance);
                        currentSnapDragDistance = currentSnapDragDistance % _this.snapDistance;
                        localDelta.normalizeToRef(tmpVector);
                        tmpVector.scaleInPlace(_this.snapDistance * dragSteps);
                        _this.attachedMesh.position.addInPlace(tmpVector);
                        tmpSnapEvent.snapDistance = _this.snapDistance * dragSteps;
                        _this.onSnapObservable.notifyObservers(tmpSnapEvent);
                    }
                }
            }
        });
        _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {
            if (_this._customMeshSet) {
                return;
            }
            var isHovered = pointerInfo.pickInfo && (_this._rootMesh.getChildMeshes().indexOf(pointerInfo.pickInfo.pickedMesh) != -1);
            var material = isHovered ? _this._hoverMaterial : _this._coloredMaterial;
            _this._rootMesh.getChildMeshes().forEach(function (m) {
                m.material = material;
            });
        });
        var light = gizmoLayer._getSharedGizmoLight();
        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(_this._rootMesh.getChildMeshes(false));
        return _this;
    }
    /** @hidden */
    PlaneDragGizmo._CreatePlane = function (scene, material) {
        var plane = new TransformNode("plane", scene);
        //make sure plane is double sided
        var dragPlane = PlaneBuilder.CreatePlane("dragPlane", { width: .1375, height: .1375, sideOrientation: 2 }, scene);
        dragPlane.material = material;
        dragPlane.parent = plane;
        // Position plane pointing normal to dragPlane normal
        dragPlane.material = material;
        return plane;
    };
    /** @hidden */
    PlaneDragGizmo._CreateArrowInstance = function (scene, arrow) {
        var instance = new TransformNode("arrow", scene);
        for (var _i = 0, _a = arrow.getChildMeshes(); _i < _a.length; _i++) {
            var mesh = _a[_i];
            var childInstance = mesh.createInstance(mesh.name);
            childInstance.parent = instance;
        }
        return instance;
    };
    PlaneDragGizmo.prototype._attachedMeshChanged = function (value) {
        if (this.dragBehavior) {
            this.dragBehavior.enabled = value ? true : false;
        }
    };
    Object.defineProperty(PlaneDragGizmo.prototype, "isEnabled", {
        get: function () {
            return this._isEnabled;
        },
        /**
         * If the gizmo is enabled
         */
        set: function (value) {
            this._isEnabled = value;
            if (!value) {
                this.attachedMesh = null;
            }
            else {
                if (this._parent) {
                    this.attachedMesh = this._parent.attachedMesh;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Disposes of the gizmo
     */
    PlaneDragGizmo.prototype.dispose = function () {
        this.onSnapObservable.clear();
        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);
        this.dragBehavior.detach();
        _super.prototype.dispose.call(this);
        if (this._plane) {
            this._plane.dispose();
        }
        [this._coloredMaterial, this._hoverMaterial].forEach(function (matl) {
            if (matl) {
                matl.dispose();
            }
        });
    };
    return PlaneDragGizmo;
}(Gizmo));
export { PlaneDragGizmo };
//# sourceMappingURL=planeDragGizmo.js.map