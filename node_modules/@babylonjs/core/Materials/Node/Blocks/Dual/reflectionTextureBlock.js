import { __extends } from "tslib";
import { NodeMaterialBlock } from '../../nodeMaterialBlock';
import { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';
import { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';
import { _TypeStore } from '../../../../Misc/typeStore';
import { InputBlock } from '../Input/inputBlock';
import { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';
import "../../../../Shaders/ShadersInclude/reflectionFunction";
import { CubeTexture } from '../../../Textures/cubeTexture';
import { Texture } from '../../../Textures/texture';
/**
 * Block used to read a reflection texture from a sampler
 */
var ReflectionTextureBlock = /** @class */ (function (_super) {
    __extends(ReflectionTextureBlock, _super);
    /**
     * Create a new TextureBlock
     * @param name defines the block name
     */
    function ReflectionTextureBlock(name) {
        var _this = _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment) || this;
        _this.registerInput("position", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Vertex);
        _this.registerInput("worldPosition", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);
        _this.registerInput("worldNormal", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment); // Flagging as fragment as the normal can be changed by fragment code
        _this.registerInput("world", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);
        _this.registerInput("cameraPosition", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);
        _this.registerInput("view", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Fragment);
        _this.registerOutput("rgb", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);
        _this.registerOutput("r", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);
        _this.registerOutput("g", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);
        _this.registerOutput("b", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);
        _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector4);
        return _this;
    }
    /**
     * Gets the current class name
     * @returns the class name
     */
    ReflectionTextureBlock.prototype.getClassName = function () {
        return "ReflectionTextureBlock";
    };
    Object.defineProperty(ReflectionTextureBlock.prototype, "position", {
        /**
         * Gets the world position input component
         */
        get: function () {
            return this._inputs[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReflectionTextureBlock.prototype, "worldPosition", {
        /**
         * Gets the world position input component
         */
        get: function () {
            return this._inputs[1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReflectionTextureBlock.prototype, "worldNormal", {
        /**
         * Gets the world normal input component
         */
        get: function () {
            return this._inputs[2];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReflectionTextureBlock.prototype, "world", {
        /**
         * Gets the world input component
         */
        get: function () {
            return this._inputs[3];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReflectionTextureBlock.prototype, "cameraPosition", {
        /**
        * Gets the camera (or eye) position component
        */
        get: function () {
            return this._inputs[4];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReflectionTextureBlock.prototype, "view", {
        /**
         * Gets the view input component
         */
        get: function () {
            return this._inputs[5];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReflectionTextureBlock.prototype, "rgb", {
        /**
         * Gets the rgb output component
         */
        get: function () {
            return this._outputs[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReflectionTextureBlock.prototype, "r", {
        /**
         * Gets the r output component
         */
        get: function () {
            return this._outputs[1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReflectionTextureBlock.prototype, "g", {
        /**
         * Gets the g output component
         */
        get: function () {
            return this._outputs[2];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReflectionTextureBlock.prototype, "b", {
        /**
         * Gets the b output component
         */
        get: function () {
            return this._outputs[3];
        },
        enumerable: true,
        configurable: true
    });
    ReflectionTextureBlock.prototype.autoConfigure = function (material) {
        if (!this.position.isConnected) {
            var positionInput = material.getInputBlockByPredicate(function (b) { return b.isAttribute && b.name === "position"; });
            if (!positionInput) {
                positionInput = new InputBlock("position");
                positionInput.setAsAttribute();
            }
            positionInput.output.connectTo(this.position);
        }
        if (!this.world.isConnected) {
            var worldInput = material.getInputBlockByPredicate(function (b) { return b.systemValue === NodeMaterialSystemValues.World; });
            if (!worldInput) {
                worldInput = new InputBlock("world");
                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);
            }
            worldInput.output.connectTo(this.world);
        }
        if (!this.cameraPosition.isConnected) {
            var cameraPositionInput = material.getInputBlockByPredicate(function (b) { return b.systemValue === NodeMaterialSystemValues.CameraPosition; });
            if (!cameraPositionInput) {
                cameraPositionInput = new InputBlock("cameraPosition");
                cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);
            }
            cameraPositionInput.output.connectTo(this.cameraPosition);
        }
        if (!this.view.isConnected) {
            var viewInput = material.getInputBlockByPredicate(function (b) { return b.systemValue === NodeMaterialSystemValues.View; });
            if (!viewInput) {
                viewInput = new InputBlock("view");
                viewInput.setAsSystemValue(NodeMaterialSystemValues.View);
            }
            viewInput.output.connectTo(this.view);
        }
    };
    ReflectionTextureBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {
        if (!defines._areTexturesDirty) {
            return;
        }
        if (!this.texture || !this.texture.getTextureMatrix) {
            return;
        }
        defines.setValue(this._define3DName, this.texture.isCube);
        defines.setValue(this._defineLocalCubicName, this.texture.boundingBoxSize ? true : false);
        defines.setValue(this._defineExplicitName, this.texture.coordinatesMode === 0);
        defines.setValue(this._defineSkyboxName, this.texture.coordinatesMode === 5);
        defines.setValue(this._defineCubicName, this.texture.coordinatesMode === 3);
        defines.setValue(this._defineSphericalName, this.texture.coordinatesMode === 1);
        defines.setValue(this._definePlanarName, this.texture.coordinatesMode === 2);
        defines.setValue(this._defineProjectionName, this.texture.coordinatesMode === 4);
        defines.setValue(this._defineEquirectangularName, this.texture.coordinatesMode === 7);
        defines.setValue(this._defineEquirectangularFixedName, this.texture.coordinatesMode === 8);
        defines.setValue(this._defineMirroredEquirectangularFixedName, this.texture.coordinatesMode === 9);
    };
    ReflectionTextureBlock.prototype.isReady = function () {
        if (this.texture && !this.texture.isReadyOrNotBlocking()) {
            return false;
        }
        return true;
    };
    ReflectionTextureBlock.prototype.bind = function (effect, nodeMaterial, mesh) {
        if (!mesh || !this.texture) {
            return;
        }
        effect.setMatrix(this._reflectionMatrixName, this.texture.getReflectionTextureMatrix());
        if (this.texture.isCube) {
            effect.setTexture(this._cubeSamplerName, this.texture);
        }
        else {
            effect.setTexture(this._2DSamplerName, this.texture);
        }
    };
    ReflectionTextureBlock.prototype._injectVertexCode = function (state) {
        var worldPosVaryingName = "v_" + this.worldPosition.associatedVariableName;
        if (state._emitVaryingFromString(worldPosVaryingName, "vec4")) {
            state.compilationString += worldPosVaryingName + " = " + this.worldPosition.associatedVariableName + ";\r\n";
        }
        this._positionUVWName = state._getFreeVariableName("positionUVW");
        this._directionWName = state._getFreeVariableName("directionW");
        if (state._emitVaryingFromString(this._positionUVWName, "vec3", this._defineSkyboxName)) {
            state.compilationString += "#ifdef " + this._defineSkyboxName + "\r\n";
            state.compilationString += this._positionUVWName + " = " + this.position.associatedVariableName + ".xyz;\r\n";
            state.compilationString += "#endif\r\n";
        }
        if (state._emitVaryingFromString(this._directionWName, "vec3", "defined(" + this._defineEquirectangularFixedName + ") || defined(" + this._defineMirroredEquirectangularFixedName + ")")) {
            state.compilationString += "#if defined(" + this._defineEquirectangularFixedName + ") || defined(" + this._defineMirroredEquirectangularFixedName + ")\r\n";
            state.compilationString += this._directionWName + " = normalize(vec3(" + this.world.associatedVariableName + " * vec4(" + this.position.associatedVariableName + ".xyz, 0.0)));\r\n";
            state.compilationString += "#endif\r\n";
        }
    };
    ReflectionTextureBlock.prototype._writeOutput = function (state, output, swizzle) {
        state.compilationString += this._declareOutput(output, state) + " = " + this._reflectionColorName + "." + swizzle + ";\r\n";
    };
    ReflectionTextureBlock.prototype._buildBlock = function (state) {
        _super.prototype._buildBlock.call(this, state);
        if (!this.texture) {
            if (state.target === NodeMaterialBlockTargets.Fragment) {
                for (var _i = 0, _a = this._outputs; _i < _a.length; _i++) {
                    var output = _a[_i];
                    if (output.hasEndpoints) {
                        state.compilationString += this._declareOutput(output, state) + " = vec3(0.)." + output.name + ";\r\n";
                    }
                }
            }
            return;
        }
        if (state.target !== NodeMaterialBlockTargets.Fragment) {
            this._define3DName = state._getFreeDefineName("REFLECTIONMAP_3D");
            this._defineCubicName = state._getFreeDefineName("REFLECTIONMAP_CUBIC");
            this._defineSphericalName = state._getFreeDefineName("REFLECTIONMAP_SPHERICAL");
            this._definePlanarName = state._getFreeDefineName("REFLECTIONMAP_PLANAR");
            this._defineProjectionName = state._getFreeDefineName("REFLECTIONMAP_PROJECTION");
            this._defineExplicitName = state._getFreeDefineName("REFLECTIONMAP_EXPLICIT");
            this._defineEquirectangularName = state._getFreeDefineName("REFLECTIONMAP_EQUIRECTANGULAR");
            this._defineLocalCubicName = state._getFreeDefineName("USE_LOCAL_REFLECTIONMAP_CUBIC");
            this._defineMirroredEquirectangularFixedName = state._getFreeDefineName("REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED");
            this._defineEquirectangularFixedName = state._getFreeDefineName("REFLECTIONMAP_EQUIRECTANGULAR_FIXED");
            this._defineSkyboxName = state._getFreeDefineName("REFLECTIONMAP_SKYBOX");
            // Vertex
            this._injectVertexCode(state);
            return;
        }
        state.sharedData.blockingBlocks.push(this);
        state.sharedData.textureBlocks.push(this);
        // Samplers
        this._cubeSamplerName = state._getFreeVariableName(this.name + "CubeSampler");
        state.samplers.push(this._cubeSamplerName);
        this._2DSamplerName = state._getFreeVariableName(this.name + "2DSampler");
        state.samplers.push(this._2DSamplerName);
        state._samplerDeclaration += "#ifdef " + this._define3DName + "\r\n";
        state._samplerDeclaration += "uniform samplerCube " + this._cubeSamplerName + ";\r\n";
        state._samplerDeclaration += "#else\r\n";
        state._samplerDeclaration += "uniform sampler2D " + this._2DSamplerName + ";\r\n";
        state._samplerDeclaration += "#endif\r\n";
        // Fragment
        state.sharedData.blocksWithDefines.push(this);
        state.sharedData.bindableBlocks.push(this);
        var comments = "//" + this.name;
        state._emitFunction("ReciprocalPI", "#define RECIPROCAL_PI2 0.15915494", "");
        state._emitFunctionFromInclude("reflectionFunction", comments);
        this._reflectionColorName = state._getFreeVariableName("reflectionColor");
        this._reflectionCoordsName = state._getFreeVariableName("reflectionUVW");
        this._reflection2DCoordsName = state._getFreeVariableName("reflectionUV");
        this._reflectionMatrixName = state._getFreeVariableName("reflectionMatrix");
        state._emitUniformFromString(this._reflectionMatrixName, "mat4");
        // Code
        var worldPos = "v_" + this.worldPosition.associatedVariableName;
        var worldNormal = this.worldNormal.associatedVariableName + ".xyz";
        var reflectionMatrix = this._reflectionMatrixName;
        var direction = "normalize(" + this._directionWName + ")";
        var positionUVW = "" + this._positionUVWName;
        var vEyePosition = "" + this.cameraPosition.associatedVariableName;
        var view = "" + this.view.associatedVariableName;
        state.compilationString += "vec3 " + this._reflectionColorName + ";\r\n";
        state.compilationString += "#ifdef " + this._defineMirroredEquirectangularFixedName + "\r\n";
        state.compilationString += "    vec3 " + this._reflectionCoordsName + " = computeMirroredFixedEquirectangularCoords(" + worldPos + ", " + worldNormal + ", " + direction + ");\r\n";
        state.compilationString += "#endif\r\n";
        state.compilationString += "#ifdef " + this._defineEquirectangularFixedName + "\r\n";
        state.compilationString += "    vec3 " + this._reflectionCoordsName + " = computeFixedEquirectangularCoords(" + worldPos + ", " + worldNormal + ", " + direction + ");\r\n";
        state.compilationString += "#endif\r\n";
        state.compilationString += "#ifdef " + this._defineEquirectangularName + "\r\n";
        state.compilationString += "    vec3 " + this._reflectionCoordsName + " = computeEquirectangularCoords(" + worldPos + ", " + worldNormal + ", " + vEyePosition + ".xyz, " + reflectionMatrix + ");\r\n";
        state.compilationString += " #endif\r\n";
        state.compilationString += "#ifdef " + this._defineSphericalName + "\r\n";
        state.compilationString += "    vec3 " + this._reflectionCoordsName + " = computeSphericalCoords(" + worldPos + ", " + worldNormal + ", " + view + ", " + reflectionMatrix + ");\r\n";
        state.compilationString += "#endif\r\n";
        state.compilationString += "#ifdef " + this._definePlanarName + "\r\n";
        state.compilationString += "    vec3 " + this._reflectionCoordsName + " = computePlanarCoords(" + worldPos + ", " + worldNormal + ", " + vEyePosition + ".xyz, " + reflectionMatrix + ");\r\n";
        state.compilationString += "#endif\r\n";
        state.compilationString += "#ifdef " + this._defineCubicName + "\r\n";
        state.compilationString += "    #ifdef " + this._defineLocalCubicName + "\r\n";
        state.compilationString += "        vec3 " + this._reflectionCoordsName + " = computeCubicLocalCoords(" + worldPos + ", " + worldNormal + ", " + vEyePosition + ".xyz, " + reflectionMatrix + ", vReflectionSize, vReflectionPosition);\r\n";
        state.compilationString += "    #else\r\n";
        state.compilationString += "       vec3 " + this._reflectionCoordsName + " = computeCubicCoords(" + worldPos + ", " + worldNormal + ", " + vEyePosition + ".xyz, " + reflectionMatrix + ");\r\n";
        state.compilationString += "    #endif\r\n";
        state.compilationString += "#endif\r\n";
        state.compilationString += "#ifdef " + this._defineProjectionName + "\r\n";
        state.compilationString += "    vec3 " + this._reflectionCoordsName + " = computeProjectionCoords(" + worldPos + ", " + view + ", " + reflectionMatrix + ");\r\n";
        state.compilationString += "#endif\r\n";
        state.compilationString += "#ifdef " + this._defineSkyboxName + "\r\n";
        state.compilationString += "    vec3 " + this._reflectionCoordsName + " = computeSkyBoxCoords(" + positionUVW + ", " + reflectionMatrix + ");\r\n";
        state.compilationString += "#endif\r\n";
        state.compilationString += "#ifdef " + this._defineExplicitName + "\r\n";
        state.compilationString += "    vec3 " + this._reflectionCoordsName + " = vec3(0, 0, 0);\r\n";
        state.compilationString += "#endif\r\n";
        state.compilationString += "#ifdef " + this._define3DName + "\r\n";
        state.compilationString += this._reflectionColorName + " = textureCube(" + this._cubeSamplerName + ", " + this._reflectionCoordsName + ").rgb;\r\n";
        state.compilationString += "#else\r\n";
        state.compilationString += "vec2 " + this._reflection2DCoordsName + " = " + this._reflectionCoordsName + ".xy;\r\n";
        state.compilationString += "#ifdef " + this._defineProjectionName + "\r\n";
        state.compilationString += this._reflection2DCoordsName + " /= " + this._reflectionCoordsName + ".z;\r\n";
        state.compilationString += "#endif\r\n";
        state.compilationString += this._reflection2DCoordsName + ".y = 1.0 - " + this._reflection2DCoordsName + ".y;\r\n";
        state.compilationString += this._reflectionColorName + " = texture2D(" + this._2DSamplerName + ", " + this._reflection2DCoordsName + ").rgb;\r\n";
        state.compilationString += "#endif\r\n";
        for (var _b = 0, _c = this._outputs; _b < _c.length; _b++) {
            var output = _c[_b];
            if (output.hasEndpoints) {
                this._writeOutput(state, output, output.name);
            }
        }
        return this;
    };
    ReflectionTextureBlock.prototype._dumpPropertiesCode = function () {
        if (!this.texture) {
            return "";
        }
        var codeString;
        if (this.texture.isCube) {
            codeString = this._codeVariableName + ".texture = new BABYLON.CubeTexture(\"" + this.texture.name + "\");\r\n";
        }
        else {
            codeString = this._codeVariableName + ".texture = new BABYLON.Texture(\"" + this.texture.name + "\");\r\n";
        }
        codeString += this._codeVariableName + ".texture.coordinatesMode = " + this.texture.coordinatesMode + ";\r\n";
        return codeString;
    };
    ReflectionTextureBlock.prototype.serialize = function () {
        var serializationObject = _super.prototype.serialize.call(this);
        if (this.texture) {
            serializationObject.texture = this.texture.serialize();
        }
        return serializationObject;
    };
    ReflectionTextureBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {
        _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);
        if (serializationObject.texture) {
            rootUrl = serializationObject.texture.url.indexOf("data:") === 0 ? "" : rootUrl;
            if (serializationObject.texture.isCube) {
                this.texture = CubeTexture.Parse(serializationObject.texture, scene, rootUrl);
            }
            else {
                this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl);
            }
        }
    };
    return ReflectionTextureBlock;
}(NodeMaterialBlock));
export { ReflectionTextureBlock };
_TypeStore.RegisteredTypes["BABYLON.ReflectionTextureBlock"] = ReflectionTextureBlock;
//# sourceMappingURL=reflectionTextureBlock.js.map