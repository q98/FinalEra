import { __assign } from "tslib";
import { Texture } from '../Materials/Textures/texture';
import { VertexBuffer } from '../Meshes/buffer';
import { Viewport } from '../Maths/math.viewport';
import { Observable } from '../Misc/observable';
import { Effect } from './effect';
import "../Engines/Extensions/engine.renderTarget";
// Prevents ES6 Crash if not imported.
import "../Shaders/postprocess.vertex";
/**
 * Helper class to render one or more effects
 */
var EffectRenderer = /** @class */ (function () {
    /**
     * Creates an effect renderer
     * @param engine the engine to use for rendering
     * @param options defines the options of the effect renderer
     */
    function EffectRenderer(engine, options) {
        var _a;
        if (options === void 0) { options = EffectRenderer._DefaultOptions; }
        this.engine = engine;
        this._ringBufferIndex = 0;
        this._ringScreenBuffer = null;
        this._fullscreenViewport = new Viewport(0, 0, 1, 1);
        options = __assign(__assign({}, EffectRenderer._DefaultOptions), options);
        this._vertexBuffers = (_a = {},
            _a[VertexBuffer.PositionKind] = new VertexBuffer(engine, options.positions, VertexBuffer.PositionKind, false, false, 2),
            _a);
        this._indexBuffer = engine.createIndexBuffer(options.indices);
        // No need here for full screen render.
        engine.depthCullingState.depthTest = false;
        engine.stencilState.stencilTest = false;
    }
    EffectRenderer.prototype._getNextFrameBuffer = function (incrementIndex) {
        if (incrementIndex === void 0) { incrementIndex = true; }
        if (!this._ringScreenBuffer) {
            this._ringScreenBuffer = [];
            for (var i = 0; i < 2; i++) {
                var internalTexture = this.engine.createRenderTargetTexture({
                    width: this.engine.getRenderWidth(true),
                    height: this.engine.getRenderHeight(true),
                }, {
                    generateDepthBuffer: false,
                    generateStencilBuffer: false,
                    generateMipMaps: false,
                    samplingMode: 1,
                });
                var texture = new Texture("", null);
                texture._texture = internalTexture;
                this._ringScreenBuffer.push(texture);
            }
        }
        var ret = this._ringScreenBuffer[this._ringBufferIndex];
        if (incrementIndex) {
            this._ringBufferIndex = (this._ringBufferIndex + 1) % 2;
        }
        return ret;
    };
    /**
     * Sets the current viewport in normalized coordinates 0-1
     * @param viewport Defines the viewport to set (defaults to 0 0 1 1)
     */
    EffectRenderer.prototype.setViewport = function (viewport) {
        if (viewport === void 0) { viewport = this._fullscreenViewport; }
        this.engine.setViewport(viewport);
    };
    /**
     * Binds the embedded attributes buffer to the effect.
     * @param effect Defines the effect to bind the attributes for
     */
    EffectRenderer.prototype.bindBuffers = function (effect) {
        this.engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);
    };
    /**
     * Sets the current effect wrapper to use during draw.
     * The effect needs to be ready before calling this api.
     * This also sets the default full screen position attribute.
     * @param effectWrapper Defines the effect to draw with
     */
    EffectRenderer.prototype.applyEffectWrapper = function (effectWrapper) {
        this.engine.enableEffect(effectWrapper.effect);
        this.bindBuffers(effectWrapper.effect);
        effectWrapper.onApplyObservable.notifyObservers({});
    };
    /**
     * Draws a full screen quad.
     */
    EffectRenderer.prototype.draw = function () {
        this.engine.drawElementsType(0, 0, 6);
    };
    /**
     * renders one or more effects to a specified texture
     * @param effectWrappers list of effects to renderer
     * @param outputTexture texture to draw to, if null it will render to the screen
     */
    EffectRenderer.prototype.render = function (effectWrappers, outputTexture) {
        var _this = this;
        if (outputTexture === void 0) { outputTexture = null; }
        if (!Array.isArray(effectWrappers)) {
            effectWrappers = [effectWrappers];
        }
        // Ensure all effects are ready
        for (var _i = 0, effectWrappers_1 = effectWrappers; _i < effectWrappers_1.length; _i++) {
            var wrapper = effectWrappers_1[_i];
            if (!wrapper.effect.isReady()) {
                return;
            }
        }
        effectWrappers.forEach(function (effectWrapper, i) {
            var renderTo = outputTexture;
            // for any next effect make it's input the output of the previous effect
            if (i !== 0) {
                effectWrapper.effect.onBindObservable.addOnce(function () {
                    effectWrapper.effect.setTexture("textureSampler", _this._getNextFrameBuffer(false));
                });
            }
            // Set the output to the next screenbuffer
            if (effectWrappers.length > 1 && i != effectWrappers.length - 1) {
                renderTo = _this._getNextFrameBuffer();
            }
            else {
                renderTo = outputTexture;
            }
            // Reset state
            _this.setViewport();
            _this.applyEffectWrapper(effectWrapper);
            if (renderTo) {
                _this.engine.bindFramebuffer(renderTo.getInternalTexture());
            }
            _this.draw();
            if (renderTo) {
                _this.engine.unBindFramebuffer(renderTo.getInternalTexture());
            }
        });
    };
    /**
     * Disposes of the effect renderer
     */
    EffectRenderer.prototype.dispose = function () {
        if (this._ringScreenBuffer) {
            this._ringScreenBuffer.forEach(function (b) {
                b.dispose();
            });
            this._ringScreenBuffer = null;
        }
        var vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];
        if (vertexBuffer) {
            vertexBuffer.dispose();
            delete this._vertexBuffers[VertexBuffer.PositionKind];
        }
        if (this._indexBuffer) {
            this.engine._releaseBuffer(this._indexBuffer);
        }
    };
    // Fullscreen quad buffers by default.
    EffectRenderer._DefaultOptions = {
        positions: [1, 1, -1, 1, -1, -1, 1, -1],
        indices: [0, 1, 2, 0, 2, 3]
    };
    return EffectRenderer;
}());
export { EffectRenderer };
/**
 * Wraps an effect to be used for rendering
 */
var EffectWrapper = /** @class */ (function () {
    /**
     * Creates an effect to be renderer
     * @param creationOptions options to create the effect
     */
    function EffectWrapper(creationOptions) {
        var _this = this;
        /**
         * Event that is fired right before the effect is drawn (should be used to update uniforms)
         */
        this.onApplyObservable = new Observable();
        var effectCreationOptions;
        var uniformNames = creationOptions.uniformNames || [];
        if (creationOptions.vertexShader) {
            effectCreationOptions = {
                fragmentSource: creationOptions.fragmentShader,
                vertexSource: creationOptions.vertexShader,
                spectorName: creationOptions.name || "effectWrapper"
            };
        }
        else {
            // Default scale to use in post process vertex shader.
            uniformNames.push("scale");
            effectCreationOptions = {
                fragmentSource: creationOptions.fragmentShader,
                vertex: "postprocess",
                spectorName: creationOptions.name || "effectWrapper"
            };
            // Sets the default scale to identity for the post process vertex shader.
            this.onApplyObservable.add(function () {
                _this.effect.setFloat2("scale", 1, 1);
            });
        }
        this.effect = new Effect(effectCreationOptions, creationOptions.attributeNames || ["position"], uniformNames, creationOptions.samplerNames, creationOptions.engine);
    }
    /**
    * Disposes of the effect wrapper
    */
    EffectWrapper.prototype.dispose = function () {
        this.effect.dispose();
    };
    return EffectWrapper;
}());
export { EffectWrapper };
//# sourceMappingURL=effectRenderer.js.map