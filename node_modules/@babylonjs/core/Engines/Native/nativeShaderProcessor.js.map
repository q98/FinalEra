{"version":3,"file":"nativeShaderProcessor.js","sourceRoot":"","sources":["../../../../sourceES6/core/Engines/Native/nativeShaderProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebGL2ShaderProcessor } from \"../WebGL/webGL2ShaderProcessors\";\r\nimport { VertexBuffer } from \"../../Meshes/buffer\";\r\n\r\n// These numbers must match the values for bgfx::Attrib::Enum\r\nconst attributeLocations: { [kind: string]: number } = {\r\n    [VertexBuffer.PositionKind]: 0,\r\n    [VertexBuffer.NormalKind]: 1,\r\n    [VertexBuffer.TangentKind]: 2,\r\n    [VertexBuffer.UVKind]: 10,\r\n    [VertexBuffer.UV2Kind]: 11,\r\n    [VertexBuffer.UV3Kind]: 12,\r\n    [VertexBuffer.UV4Kind]: 13,\r\n    [VertexBuffer.ColorKind]: 4,\r\n    [VertexBuffer.MatricesIndicesKind]: 8,\r\n    [VertexBuffer.MatricesWeightsKind]: 9,\r\n};\r\n// Remap BJS names to bgfx names\r\nconst attributeBGFXName: { [kind: string]: string } = {\r\n    [VertexBuffer.PositionKind]: \"a_position\",\r\n    [VertexBuffer.NormalKind]: \"a_normal\",\r\n    [VertexBuffer.TangentKind]: \"a_tangent\",\r\n    [VertexBuffer.UVKind]: \"a_texcoord0\",\r\n    [VertexBuffer.UV2Kind]: \"a_texcoord1\",\r\n    [VertexBuffer.UV3Kind]: \"a_texcoord2\",\r\n    [VertexBuffer.UV4Kind]: \"a_texcoord3\",\r\n    [VertexBuffer.ColorKind]: \"a_color0\",\r\n    [VertexBuffer.MatricesIndicesKind]: \"a_indices\",\r\n    [VertexBuffer.MatricesWeightsKind]: \"a_weight\",\r\n};\r\n\r\n// Must match bgfx::Attrib::TexCoord0\r\nconst firstGenericAttributeLocation = 10;\r\n\r\n// Must match bgfx::Attrib::TexCoord7\r\nconst lastGenericAttributeLocation = 17;\r\n\r\n/** @hidden */\r\nexport class NativeShaderProcessor extends WebGL2ShaderProcessor {\r\n    private _genericAttributeLocation: number;\r\n    private _varyingLocationCount: number;\r\n    private _varyingLocationMap: { [name: string]: number };\r\n    private _replacements: Array<{ searchValue: RegExp, replaceValue: string }>;\r\n    private _textureCount: number;\r\n    private _uniforms: Array<string>;\r\n\r\n    public lineProcessor(line: string): string {\r\n        for (const replacement of this._replacements) {\r\n            line = line.replace(replacement.searchValue, replacement.replaceValue);\r\n        }\r\n\r\n        return line;\r\n    }\r\n\r\n    public attributeProcessor(attribute: string): string {\r\n        const match = attribute.match(/attribute\\s+[^\\s]+\\s+([^\\s]+)\\s*(?:\\[.+\\])?\\s*;/)!;\r\n        const name = match[1];\r\n\r\n        let location = attributeLocations[name];\r\n        if (location === undefined) {\r\n            location = this._genericAttributeLocation++;\r\n            if (location > lastGenericAttributeLocation) {\r\n                throw new Error(\"Exceeded maximum custom attributes\");\r\n            }\r\n        }\r\n        let newName = attributeBGFXName[name];\r\n        if (newName === undefined) {\r\n            throw new Error(\"Can't find bgfx name mapping\");\r\n        }\r\n        attribute = attribute.replace(name, newName);\r\n        this._replacements.push({ searchValue: new RegExp(`\\\\b${name}\\\\b`, 'g'), replaceValue: `${newName}` });\r\n        return `layout(location=${location}) ${super.attributeProcessor(attribute)}`;\r\n    }\r\n\r\n    public varyingProcessor(varying: string, isFragment: boolean): string {\r\n        let location: number;\r\n\r\n        if (isFragment) {\r\n            location = this._varyingLocationMap[varying];\r\n        }\r\n        else {\r\n            location = this._varyingLocationCount++;\r\n            this._varyingLocationMap[varying] = location;\r\n        }\r\n\r\n        return `layout(location=${location}) ${super.varyingProcessor(varying, isFragment)}`;\r\n    }\r\n\r\n    public uniformProcessor(uniform: string): string {\r\n        const match = uniform.match(/uniform\\s+([^\\s]+)\\s+([^\\s]+)\\s*(?:\\[.+\\])?\\s*;/)!;\r\n        const type = match[1];\r\n        const name = match[2];\r\n\r\n        switch (type) {\r\n            case \"sampler2D\":\r\n            case \"samplerCube\": {\r\n                const suffix = type.substr(7);\r\n                const binding = this._textureCount++;\r\n                this._replacements.push({ searchValue: new RegExp(`\\\\b${name}\\\\b`), replaceValue: `sampler${suffix}(${name}Texture, ${name})` });\r\n                return `layout(binding=${binding}) uniform texture${suffix} ${name}Texture;\\nlayout(binding=${binding}) uniform sampler ${name};`;\r\n            }\r\n            case \"float\": {\r\n                this._replacements.push({ searchValue: new RegExp(`\\\\b${name}\\\\b`), replaceValue: `${name}.x` });\r\n                uniform = `uniform vec4 ${name};`;\r\n                break;\r\n            }\r\n            case \"vec2\": {\r\n                this._replacements.push({ searchValue: new RegExp(`\\\\b${name}\\\\b`), replaceValue: `${name}.xy` });\r\n                uniform = `uniform vec4 ${name};`;\r\n                break;\r\n            }\r\n            case \"vec3\": {\r\n                this._replacements.push({ searchValue: new RegExp(`\\\\b${name}\\\\b`), replaceValue: `${name}.xyz` });\r\n                uniform = `uniform vec4 ${name};`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        this._uniforms.push(uniform);\r\n        return this._uniforms.length === 1 ? \"<UNIFORM>\" : \"\";\r\n    }\r\n\r\n    public preProcessor(code: string, defines: string[], isFragment: boolean): string {\r\n        this._genericAttributeLocation = firstGenericAttributeLocation;\r\n\r\n        if (!isFragment) {\r\n            this._varyingLocationCount = 0;\r\n            this._varyingLocationMap = {};\r\n        }\r\n\r\n        this._replacements = [];\r\n        this._textureCount = 0;\r\n        this._uniforms = [];\r\n        return code;\r\n    }\r\n\r\n   public postProcessor(code: string, defines: string[], isFragment: boolean): string {\r\n        code = super.postProcessor(code, defines, isFragment);\r\n        code = code.replace(\"<UNIFORM>\", `layout(binding=0) uniform Frame {\\n${this._uniforms.join(\"\\n\")}\\n};`);\r\n        code = code.replace(\"out vec4 glFragColor\", \"layout(location=0) out vec4 glFragColor\");\r\n        return code;\r\n    }\r\n}"]}