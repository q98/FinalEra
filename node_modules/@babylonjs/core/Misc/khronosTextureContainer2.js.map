{"version":3,"file":"khronosTextureContainer2.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/khronosTextureContainer2.ts"],"names":[],"mappings":"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","sourcesContent":["import { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { EngineCapabilities } from '../Engines/engineCapabilities';\r\n\r\ndeclare var LIBKTX: any;\r\n\r\n/**\r\n * Class for loading KTX2 files\r\n * !!! Experimental Extension Subject to Changes !!!\r\n * @hidden\r\n */\r\nexport class KhronosTextureContainer2 {\r\n    private static _ModulePromise: Promise<{ module: any }>;\r\n    private static _TranscodeFormat: number;\r\n\r\n    public constructor(engine: ThinEngine) {\r\n        if (!KhronosTextureContainer2._ModulePromise) {\r\n            KhronosTextureContainer2._ModulePromise = new Promise((resolve) => {\r\n                LIBKTX().then((module: any) => {\r\n                    module.GL.makeContextCurrent(module.GL.registerContext(engine._gl, { majorVersion: engine._webGLVersion }));\r\n                    KhronosTextureContainer2._TranscodeFormat = this._determineTranscodeFormat(module.TranscodeTarget, engine.getCaps());\r\n                    resolve({ module: module });\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    public uploadAsync(data: ArrayBufferView, internalTexture: InternalTexture): Promise<void> {\r\n        return KhronosTextureContainer2._ModulePromise.then((moduleWrapper: any) => {\r\n            const module = moduleWrapper.module;\r\n\r\n            const ktxTexture = new module.ktxTexture(data);\r\n            try {\r\n                if (ktxTexture.isBasisSupercompressed) {\r\n                    ktxTexture.transcodeBasis(KhronosTextureContainer2._TranscodeFormat, 0);\r\n                }\r\n\r\n                internalTexture.width = internalTexture.baseWidth = ktxTexture.baseWidth;\r\n                internalTexture.height = internalTexture.baseHeight = ktxTexture.baseHeight;\r\n                internalTexture.generateMipMaps = false;\r\n\r\n                const result = ktxTexture.glUpload();\r\n                if (result.error === 0) {\r\n                    internalTexture._webGLTexture = result.texture;\r\n                }\r\n                else {\r\n                    throw new Error(`Failed to upload: ${result.error}`);\r\n                }\r\n\r\n                internalTexture.isReady = true;\r\n            }\r\n            finally {\r\n                ktxTexture.delete();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _determineTranscodeFormat(transcodeTarget: any, caps: EngineCapabilities): number {\r\n        if (caps.s3tc) {\r\n            return transcodeTarget.BC1_OR_3;\r\n        }\r\n        else if (caps.etc2) {\r\n            return transcodeTarget.ETC;\r\n        }\r\n\r\n        throw new Error(\"No compatible format available\");\r\n    }\r\n\r\n    /**\r\n     * Checks if the given data starts with a KTX2 file identifier.\r\n     * @param data the data to check\r\n     * @returns true if the data is a KTX2 file or false otherwise\r\n     */\r\n    public static IsValid(data: ArrayBufferView): boolean {\r\n        if (data.byteLength >= 12)\r\n        {\r\n            // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\r\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\r\n            if (identifier[0] === 0xAB && identifier[1] === 0x4B && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x32 &&\r\n                identifier[6] === 0x30 && identifier[7] === 0xBB && identifier[8] === 0x0D && identifier[9] === 0x0A && identifier[10] === 0x1A && identifier[11] === 0x0A) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]}