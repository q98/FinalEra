{"version":3,"file":"WebXRControllerPointerSelection.js","sourceRoot":"","sources":["../../../../sourceES6/core/XR/features/WebXRControllerPointerSelection.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport { WebXRSessionManager } from '../webXRSessionManager';\r\nimport { AbstractMesh } from '../../Meshes/abstractMesh';\r\nimport { Observer } from '../../Misc/observable';\r\nimport { WebXRInput } from '../webXRInput';\r\nimport { WebXRInputSource } from '../webXRInputSource';\r\nimport { Scene } from '../../scene';\r\nimport { WebXRControllerComponent } from '../motionController/webXRControllerComponent';\r\nimport { Nullable } from '../../types';\r\nimport { Vector3 } from '../../Maths/math.vector';\r\nimport { Color3 } from '../../Maths/math.color';\r\nimport { Axis } from '../../Maths/math.axis';\r\nimport { StandardMaterial } from '../../Materials/standardMaterial';\r\nimport { CylinderBuilder } from '../../Meshes/Builders/cylinderBuilder';\r\nimport { TorusBuilder } from '../../Meshes/Builders/torusBuilder';\r\nimport { Ray } from '../../Culling/ray';\r\nimport { PickingInfo } from '../../Collisions/pickingInfo';\r\nimport { WebXRAbstractFeature } from './WebXRAbstractFeature';\r\nimport { UtilityLayerRenderer } from '../../Rendering/utilityLayerRenderer';\r\n\r\n/**\r\n * Options interface for the pointer selection module\r\n */\r\nexport interface IWebXRControllerPointerSelectionOptions {\r\n    /**\r\n     * if provided, this scene will be used to render meshes.\r\n     */\r\n    customUtilityLayerScene?: Scene;\r\n    /**\r\n     * Disable the pointer up event when the xr controller in screen and gaze mode is disposed (meaning - when the user removed the finger from the screen)\r\n     * If not disabled, the last picked point will be used to execute a pointer up event\r\n     * If disabled, pointer up event will be triggered right after the pointer down event.\r\n     * Used in screen and gaze target ray mode only\r\n     */\r\n    disablePointerUpOnTouchOut: boolean;\r\n    /**\r\n     * For gaze mode (time to select instead of press)\r\n     */\r\n    forceGazeMode: boolean;\r\n    /**\r\n     * Factor to be applied to the pointer-moved function in the gaze mode. How sensitive should the gaze mode be when checking if the pointer moved\r\n     * to start a new countdown to the pointer down event.\r\n     * Defaults to 1.\r\n     */\r\n    gazeModePointerMovedFactor?: number;\r\n    /**\r\n     * Different button type to use instead of the main component\r\n     */\r\n    overrideButtonId?: string;\r\n    /**\r\n     *  use this rendering group id for the meshes (optional)\r\n     */\r\n    renderingGroupId?: number;\r\n    /**\r\n     * The amount of time in milliseconds it takes between pick found something to a pointer down event.\r\n     * Used in gaze modes. Tracked pointer uses the trigger, screen uses touch events\r\n     * 3000 means 3 seconds between pointing at something and selecting it\r\n     */\r\n    timeToSelect?: number;\r\n    /**\r\n     * Should meshes created here be added to a utility layer or the main scene\r\n     */\r\n    useUtilityLayer?: boolean;\r\n    /**\r\n     * the xr input to use with this pointer selection\r\n     */\r\n    xrInput: WebXRInput;\r\n}\r\n\r\n/**\r\n * A module that will enable pointer selection for motion controllers of XR Input Sources\r\n */\r\nexport class WebXRControllerPointerSelection extends WebXRAbstractFeature {\r\n    private static _idCounter = 0;\r\n\r\n    private _attachController = (xrController: WebXRInputSource) => {\r\n        if (this._controllers[xrController.uniqueId]) {\r\n            // already attached\r\n            return;\r\n        }\r\n        // only support tracker pointer\r\n        const { laserPointer, selectionMesh } = this._generateNewMeshPair(xrController);\r\n\r\n        // get two new meshes\r\n        this._controllers[xrController.uniqueId] = {\r\n            xrController,\r\n            laserPointer,\r\n            selectionMesh,\r\n            meshUnderPointer: null,\r\n            pick: null,\r\n            tmpRay: new Ray(new Vector3(), new Vector3()),\r\n            id: WebXRControllerPointerSelection._idCounter++\r\n        };\r\n        switch (xrController.inputSource.targetRayMode) {\r\n            case \"tracked-pointer\":\r\n                return this._attachTrackedPointerRayMode(xrController);\r\n            case \"gaze\":\r\n                return this._attachGazeMode(xrController);\r\n            case \"screen\":\r\n                return this._attachScreenRayMode(xrController);\r\n        }\r\n    }\r\n\r\n    private _controllers: {\r\n        [controllerUniqueId: string]: {\r\n            xrController: WebXRInputSource;\r\n            selectionComponent?: WebXRControllerComponent;\r\n            onButtonChangedObserver?: Nullable<Observer<WebXRControllerComponent>>;\r\n            onFrameObserver?: Nullable<Observer<XRFrame>>;\r\n            laserPointer: AbstractMesh;\r\n            selectionMesh: AbstractMesh;\r\n            meshUnderPointer: Nullable<AbstractMesh>;\r\n            pick: Nullable<PickingInfo>;\r\n            id: number;\r\n            tmpRay: Ray;\r\n        };\r\n    } = {};\r\n    private _scene: Scene;\r\n    private _tmpVectorForPickCompare = new Vector3();\r\n\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.POINTER_SELECTION;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * Disable lighting on the laser pointer (so it will always be visible)\r\n     */\r\n    public disablePointerLighting: boolean = true;\r\n    /**\r\n     * Disable lighting on the selection mesh (so it will always be visible)\r\n     */\r\n    public disableSelectionMeshLighting: boolean = true;\r\n    /**\r\n     * Should the laser pointer be displayed\r\n     */\r\n    public displayLaserPointer: boolean = true;\r\n    /**\r\n     * Should the selection mesh be displayed (The ring at the end of the laser pointer)\r\n     */\r\n    public displaySelectionMesh: boolean = true;\r\n    /**\r\n     * This color will be set to the laser pointer when selection is triggered\r\n     */\r\n    public laserPointerPickedColor: Color3 = new Color3(0.9, 0.9, 0.9);\r\n    /**\r\n     * Default color of the laser pointer\r\n     */\r\n    public lasterPointerDefaultColor: Color3 = new Color3(0.7, 0.7, 0.7);\r\n    /**\r\n     * default color of the selection ring\r\n     */\r\n    public selectionMeshDefaultColor: Color3 = new Color3(0.8, 0.8, 0.8);\r\n    /**\r\n     * This color will be applied to the selection ring when selection is triggered\r\n     */\r\n    public selectionMeshPickedColor: Color3 = new Color3(0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * constructs a new background remover module\r\n     * @param _xrSessionManager the session manager for this module\r\n     * @param _options read-only options to be used in this module\r\n     */\r\n    constructor(_xrSessionManager: WebXRSessionManager, private readonly _options: IWebXRControllerPointerSelectionOptions) {\r\n        super(_xrSessionManager);\r\n        this._scene = this._xrSessionManager.scene;\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        if (!super.attach()) {\r\n            return false;\r\n        }\r\n\r\n        this._options.xrInput.controllers.forEach(this._attachController);\r\n        this._addNewAttachObserver(this._options.xrInput.onControllerAddedObservable, this._attachController);\r\n        this._addNewAttachObserver(this._options.xrInput.onControllerRemovedObservable, (controller) => {\r\n            // REMOVE the controller\r\n            this._detachController(controller.uniqueId);\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public detach(): boolean {\r\n        if (!super.detach()) {\r\n            return false;\r\n        }\r\n\r\n        Object.keys(this._controllers).forEach((controllerId) => {\r\n            this._detachController(controllerId);\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Will get the mesh under a specific pointer.\r\n     * `scene.meshUnderPointer` will only return one mesh - either left or right.\r\n     * @param controllerId the controllerId to check\r\n     * @returns The mesh under pointer or null if no mesh is under the pointer\r\n     */\r\n    public getMeshUnderPointer(controllerId: string): Nullable<AbstractMesh> {\r\n        if (this._controllers[controllerId]) {\r\n            return this._controllers[controllerId].meshUnderPointer;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the xr controller that correlates to the pointer id in the pointer event\r\n     *\r\n     * @param id the pointer id to search for\r\n     * @returns the controller that correlates to this id or null if not found\r\n     */\r\n    public getXRControllerByPointerId(id: number): Nullable<WebXRInputSource> {\r\n        const keys = Object.keys(this._controllers);\r\n\r\n        for (let i = 0; i < keys.length; ++i) {\r\n            if (this._controllers[keys[i]].id === id) {\r\n                return this._controllers[keys[i]].xrController;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected _onXRFrame(_xrFrame: XRFrame) {\r\n        Object.keys(this._controllers).forEach((id) => {\r\n            const controllerData = this._controllers[id];\r\n\r\n            // Every frame check collisions/input\r\n            controllerData.xrController.getWorldPointerRayToRef(controllerData.tmpRay);\r\n            controllerData.pick = this._scene.pickWithRay(controllerData.tmpRay);\r\n\r\n            const pick = controllerData.pick;\r\n\r\n            if (pick && pick.pickedPoint && pick.hit) {\r\n                // Update laser state\r\n                this._updatePointerDistance(controllerData.laserPointer, pick.distance);\r\n\r\n                // Update cursor state\r\n                controllerData.selectionMesh.position.copyFrom(pick.pickedPoint);\r\n                controllerData.selectionMesh.scaling.x = Math.sqrt(pick.distance);\r\n                controllerData.selectionMesh.scaling.y = Math.sqrt(pick.distance);\r\n                controllerData.selectionMesh.scaling.z = Math.sqrt(pick.distance);\r\n\r\n                // To avoid z-fighting\r\n                let pickNormal = this._convertNormalToDirectionOfRay(pick.getNormal(true), controllerData.tmpRay);\r\n                let deltaFighting = 0.001;\r\n                controllerData.selectionMesh.position.copyFrom(pick.pickedPoint);\r\n                if (pickNormal) {\r\n                    let axis1 = Vector3.Cross(Axis.Y, pickNormal);\r\n                    let axis2 = Vector3.Cross(pickNormal, axis1);\r\n                    Vector3.RotationFromAxisToRef(axis2, pickNormal, axis1, controllerData.selectionMesh.rotation);\r\n                    controllerData.selectionMesh.position.addInPlace(pickNormal.scale(deltaFighting));\r\n                }\r\n                controllerData.selectionMesh.isVisible = true && this.displaySelectionMesh;\r\n                controllerData.meshUnderPointer = pick.pickedMesh;\r\n            } else {\r\n                controllerData.selectionMesh.isVisible = false;\r\n                controllerData.meshUnderPointer = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _attachGazeMode(xrController: WebXRInputSource) {\r\n        const controllerData = this._controllers[xrController.uniqueId];\r\n        // attached when touched, detaches when raised\r\n        const timeToSelect = this._options.timeToSelect || 3000;\r\n        const sceneToRenderTo = this._options.useUtilityLayer ? (this._options.customUtilityLayerScene || UtilityLayerRenderer.DefaultUtilityLayer.utilityLayerScene) : this._scene;\r\n        let oldPick = new PickingInfo();\r\n        let discMesh = TorusBuilder.CreateTorus(\"selection\", {\r\n            diameter: 0.0035 * 15,\r\n            thickness: 0.0025 * 6,\r\n            tessellation: 20\r\n        }, sceneToRenderTo);\r\n        discMesh.isVisible = false;\r\n        discMesh.isPickable = false;\r\n        discMesh.parent = controllerData.selectionMesh;\r\n        let timer = 0;\r\n        let downTriggered = false;\r\n        controllerData.onFrameObserver = this._xrSessionManager.onXRFrameObservable.add(() => {\r\n            if (!controllerData.pick) { return; }\r\n            discMesh.isVisible = false;\r\n            if (controllerData.pick.hit) {\r\n                if (!this._pickingMoved(oldPick, controllerData.pick)) {\r\n                    if (timer > timeToSelect / 10) {\r\n                        discMesh.isVisible = true;\r\n                    }\r\n\r\n                    timer += this._scene.getEngine().getDeltaTime();\r\n                    if (timer >= timeToSelect) {\r\n                        this._scene.simulatePointerDown(controllerData.pick, { pointerId: controllerData.id });\r\n                        downTriggered = true;\r\n                        // pointer up right after down, if disable on touch out\r\n                        if (this._options.disablePointerUpOnTouchOut) {\r\n                            this._scene.simulatePointerUp(controllerData.pick, { pointerId: controllerData.id });\r\n                        }\r\n                        discMesh.isVisible = false;\r\n                    } else {\r\n                        const scaleFactor = 1 - (timer / timeToSelect);\r\n                        discMesh.scaling.set(scaleFactor, scaleFactor, scaleFactor);\r\n                    }\r\n                } else {\r\n                    if (downTriggered) {\r\n                        if (!this._options.disablePointerUpOnTouchOut) {\r\n                            this._scene.simulatePointerUp(controllerData.pick, { pointerId: controllerData.id });\r\n                        }\r\n                    }\r\n                    downTriggered = false;\r\n                    timer = 0;\r\n                }\r\n            } else {\r\n                downTriggered = false;\r\n                timer = 0;\r\n            }\r\n\r\n            this._scene.simulatePointerMove(controllerData.pick, { pointerId: controllerData.id });\r\n\r\n            oldPick = controllerData.pick;\r\n        });\r\n\r\n        if (this._options.renderingGroupId !== undefined) {\r\n            discMesh.renderingGroupId = this._options.renderingGroupId;\r\n        }\r\n        xrController.onDisposeObservable.addOnce(() => {\r\n            if (controllerData.pick && !this._options.disablePointerUpOnTouchOut && downTriggered) {\r\n                this._scene.simulatePointerUp(controllerData.pick, { pointerId: controllerData.id });\r\n            }\r\n            discMesh.dispose();\r\n        });\r\n    }\r\n\r\n    private _attachScreenRayMode(xrController: WebXRInputSource) {\r\n        const controllerData = this._controllers[xrController.uniqueId];\r\n        let downTriggered = false;\r\n        controllerData.onFrameObserver = this._xrSessionManager.onXRFrameObservable.add(() => {\r\n            if (!controllerData.pick || (this._options.disablePointerUpOnTouchOut && downTriggered)) { return; }\r\n            if (!downTriggered) {\r\n                this._scene.simulatePointerDown(controllerData.pick, { pointerId: controllerData.id });\r\n                downTriggered = true;\r\n                if (this._options.disablePointerUpOnTouchOut) {\r\n                    this._scene.simulatePointerUp(controllerData.pick, { pointerId: controllerData.id });\r\n                }\r\n            } else {\r\n                this._scene.simulatePointerMove(controllerData.pick, { pointerId: controllerData.id });\r\n            }\r\n        });\r\n        xrController.onDisposeObservable.addOnce(() => {\r\n            if (controllerData.pick && downTriggered && !this._options.disablePointerUpOnTouchOut) {\r\n                this._scene.simulatePointerUp(controllerData.pick, { pointerId: controllerData.id });\r\n            }\r\n        });\r\n    }\r\n\r\n    private _attachTrackedPointerRayMode(xrController: WebXRInputSource) {\r\n        xrController.onMotionControllerInitObservable.add((motionController) => {\r\n            if (this._options.forceGazeMode) {\r\n                return this._attachGazeMode(xrController);\r\n            }\r\n\r\n            const controllerData = this._controllers[xrController.uniqueId];\r\n\r\n            if (this._options.overrideButtonId) {\r\n                controllerData.selectionComponent = motionController.getComponent(this._options.overrideButtonId);\r\n            }\r\n            if (!controllerData.selectionComponent) {\r\n                controllerData.selectionComponent = motionController.getMainComponent();\r\n            }\r\n\r\n            controllerData.onFrameObserver = this._xrSessionManager.onXRFrameObservable.add(() => {\r\n                if (controllerData.selectionComponent && controllerData.selectionComponent.pressed) {\r\n                    (<StandardMaterial>controllerData.selectionMesh.material).emissiveColor = this.selectionMeshPickedColor;\r\n                    (<StandardMaterial>controllerData.laserPointer.material).emissiveColor = this.laserPointerPickedColor;\r\n                } else {\r\n                    (<StandardMaterial>controllerData.selectionMesh.material).emissiveColor = this.selectionMeshDefaultColor;\r\n                    (<StandardMaterial>controllerData.laserPointer.material).emissiveColor = this.lasterPointerDefaultColor;\r\n                }\r\n                controllerData.laserPointer.isVisible = this.displayLaserPointer;\r\n                (<StandardMaterial>controllerData.laserPointer.material).disableLighting = this.disablePointerLighting;\r\n                (<StandardMaterial>controllerData.selectionMesh.material).disableLighting = this.disableSelectionMeshLighting;\r\n\r\n                if (controllerData.pick) {\r\n                    this._scene.simulatePointerMove(controllerData.pick, { pointerId: controllerData.id });\r\n                }\r\n            });\r\n\r\n            controllerData.onButtonChangedObserver = controllerData.selectionComponent.onButtonStateChangedObservable.add((component) => {\r\n                if (component.changes.pressed) {\r\n                    const pressed = component.changes.pressed.current;\r\n                    if (controllerData.pick) {\r\n                        if (pressed) {\r\n                            this._scene.simulatePointerDown(controllerData.pick, { pointerId: controllerData.id });\r\n                        } else {\r\n                            this._scene.simulatePointerUp(controllerData.pick, { pointerId: controllerData.id });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private _convertNormalToDirectionOfRay(normal: Nullable<Vector3>, ray: Ray) {\r\n        if (normal) {\r\n            let angle = Math.acos(Vector3.Dot(normal, ray.direction));\r\n            if (angle < Math.PI / 2) {\r\n                normal.scaleInPlace(-1);\r\n            }\r\n        }\r\n        return normal;\r\n    }\r\n\r\n    private _detachController(xrControllerUniqueId: string) {\r\n        const controllerData = this._controllers[xrControllerUniqueId];\r\n        if (!controllerData) { return; }\r\n        if (controllerData.selectionComponent) {\r\n            if (controllerData.onButtonChangedObserver) {\r\n                controllerData.selectionComponent.onButtonStateChangedObservable.remove(controllerData.onButtonChangedObserver);\r\n            }\r\n        }\r\n        if (controllerData.onFrameObserver) {\r\n            this._xrSessionManager.onXRFrameObservable.remove(controllerData.onFrameObserver);\r\n        }\r\n        controllerData.selectionMesh.dispose();\r\n        controllerData.laserPointer.dispose();\r\n        // remove from the map\r\n        delete this._controllers[xrControllerUniqueId];\r\n    }\r\n\r\n    private _generateNewMeshPair(xrController: WebXRInputSource) {\r\n        const sceneToRenderTo = this._options.useUtilityLayer ? (this._options.customUtilityLayerScene || UtilityLayerRenderer.DefaultUtilityLayer.utilityLayerScene) : this._scene;\r\n        const laserPointer = CylinderBuilder.CreateCylinder(\"laserPointer\", {\r\n            height: 1,\r\n            diameterTop: 0.0002,\r\n            diameterBottom: 0.004,\r\n            tessellation: 20,\r\n            subdivisions: 1\r\n        }, sceneToRenderTo);\r\n        laserPointer.parent = xrController.pointer;\r\n        let laserPointerMaterial = new StandardMaterial(\"laserPointerMat\", sceneToRenderTo);\r\n        laserPointerMaterial.emissiveColor = this.lasterPointerDefaultColor;\r\n        laserPointerMaterial.alpha = 0.7;\r\n        laserPointer.material = laserPointerMaterial;\r\n        laserPointer.rotation.x = Math.PI / 2;\r\n        this._updatePointerDistance(laserPointer, 1);\r\n        laserPointer.isPickable = false;\r\n\r\n        // Create a gaze tracker for the  XR controller\r\n        const selectionMesh = TorusBuilder.CreateTorus(\"gazeTracker\", {\r\n            diameter: 0.0035 * 3,\r\n            thickness: 0.0025 * 3,\r\n            tessellation: 20\r\n        }, sceneToRenderTo);\r\n        selectionMesh.bakeCurrentTransformIntoVertices();\r\n        selectionMesh.isPickable = false;\r\n        selectionMesh.isVisible = false;\r\n        let targetMat = new StandardMaterial(\"targetMat\", sceneToRenderTo);\r\n        targetMat.specularColor = Color3.Black();\r\n        targetMat.emissiveColor = this.selectionMeshDefaultColor;\r\n        targetMat.backFaceCulling = false;\r\n        selectionMesh.material = targetMat;\r\n\r\n        if (this._options.renderingGroupId !== undefined) {\r\n            laserPointer.renderingGroupId = this._options.renderingGroupId;\r\n            selectionMesh.renderingGroupId = this._options.renderingGroupId;\r\n        }\r\n\r\n        return {\r\n            laserPointer,\r\n            selectionMesh\r\n        };\r\n    }\r\n\r\n    private _pickingMoved(oldPick: PickingInfo, newPick: PickingInfo) {\r\n        if (!oldPick.hit || !newPick.hit) { return true; }\r\n        if (!oldPick.pickedMesh || !oldPick.pickedPoint || !newPick.pickedMesh || !newPick.pickedPoint) { return true; }\r\n        if (oldPick.pickedMesh !== newPick.pickedMesh) { return true; }\r\n        oldPick.pickedPoint?.subtractToRef(newPick.pickedPoint, this._tmpVectorForPickCompare);\r\n        this._tmpVectorForPickCompare.set(Math.abs(this._tmpVectorForPickCompare.x), Math.abs(this._tmpVectorForPickCompare.y), Math.abs(this._tmpVectorForPickCompare.z));\r\n        const delta = (this._options.gazeModePointerMovedFactor || 1) * 0.01 / newPick.distance;\r\n        const length = this._tmpVectorForPickCompare.length();\r\n        if (length > delta) { return true; }\r\n        return false;\r\n    }\r\n\r\n    private _updatePointerDistance(_laserPointer: AbstractMesh, distance: number = 100) {\r\n        _laserPointer.scaling.y = distance;\r\n        // a bit of distance from the controller\r\n        _laserPointer.position.z = (distance / 2) + 0.05;\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(WebXRControllerPointerSelection.Name, (xrSessionManager, options) => {\r\n    return () => new WebXRControllerPointerSelection(xrSessionManager, options);\r\n}, WebXRControllerPointerSelection.Version, true);\r\n"]}