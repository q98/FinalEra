import { WebXRSessionManager } from '../webXRSessionManager';
import { Observable } from '../../Misc/observable';
import { Matrix } from '../../Maths/math.vector';
import { TransformNode } from '../../Meshes/transformNode';
import { WebXRPlaneDetector } from './WebXRPlaneDetector';
import { WebXRHitTestLegacy } from './WebXRHitTestLegacy';
import { WebXRAbstractFeature } from './WebXRAbstractFeature';
/**
 * Configuration options of the anchor system
 */
export interface IWebXRAnchorSystemOptions {
    /**
     * Should a new anchor be added every time a select event is triggered
     */
    addAnchorOnSelect?: boolean;
    /**
     * should the anchor system use plane detection.
     * If set to true, the plane-detection feature should be set using setPlaneDetector
     */
    usePlaneDetection?: boolean;
    /**
     * a node that will be used to convert local to world coordinates
     */
    worldParentNode?: TransformNode;
}
/**
 * A babylon container for an XR Anchor
 */
export interface IWebXRAnchor {
    /**
     * A babylon-assigned ID for this anchor
     */
    id: number;
    /**
     * Transformation matrix to apply to an object attached to this anchor
     */
    transformationMatrix: Matrix;
    /**
     * The native anchor object
     */
    xrAnchor: XRAnchor;
}
/**
 * An implementation of the anchor system of WebXR.
 * Note that the current documented implementation is not available in any browser. Future implementations
 * will use the frame to create an anchor and not the session or a detected plane
 * For further information see https://github.com/immersive-web/anchors/
 */
export declare class WebXRAnchorSystem extends WebXRAbstractFeature {
    private _options;
    private _enabled;
    private _hitTestModule;
    private _lastFrameDetected;
    private _onSelect;
    private _planeDetector;
    private _trackedAnchors;
    /**
     * The module's name
     */
    static readonly Name: string;
    /**
     * The (Babylon) version of this module.
     * This is an integer representing the implementation version.
     * This number does not correspond to the WebXR specs version
     */
    static readonly Version = 1;
    /**
     * Observers registered here will be executed when a new anchor was added to the session
     */
    onAnchorAddedObservable: Observable<IWebXRAnchor>;
    /**
     * Observers registered here will be executed when an anchor was removed from the session
     */
    onAnchorRemovedObservable: Observable<IWebXRAnchor>;
    /**
     * Observers registered here will be executed when an existing anchor updates
     * This can execute N times every frame
     */
    onAnchorUpdatedObservable: Observable<IWebXRAnchor>;
    /**
     * constructs a new anchor system
     * @param _xrSessionManager an instance of WebXRSessionManager
     * @param _options configuration object for this feature
     */
    constructor(_xrSessionManager: WebXRSessionManager, _options?: IWebXRAnchorSystemOptions);
    /**
     * Add anchor at a specific XR point.
     *
     * @param xrRigidTransformation xr-coordinates where a new anchor should be added
     * @param anchorCreator the object o use to create an anchor with. either a session or a plane
     * @returns a promise the fulfills when the anchor was created
     */
    addAnchorAtRigidTransformation(xrRigidTransformation: XRRigidTransform, anchorCreator?: XRAnchorCreator): Promise<XRAnchor>;
    /**
     * attach this feature
     * Will usually be called by the features manager
     *
     * @returns true if successful.
     */
    attach(): boolean;
    /**
     * detach this feature.
     * Will usually be called by the features manager
     *
     * @returns true if successful.
     */
    detach(): boolean;
    /**
     * Dispose this feature and all of the resources attached
     */
    dispose(): void;
    /**
     * If set, it will improve performance by using the current hit-test results instead of executing a new hit-test
     * @param hitTestModule the hit-test module to use.
     */
    setHitTestModule(hitTestModule: WebXRHitTestLegacy): void;
    /**
     * set the plane detector to use in order to create anchors from frames
     * @param planeDetector the plane-detector module to use
     * @param enable enable plane-anchors. default is true
     */
    setPlaneDetector(planeDetector: WebXRPlaneDetector, enable?: boolean): void;
    protected _onXRFrame(frame: XRFrame): void;
    /**
     * avoiding using Array.find for global support.
     * @param xrAnchor the plane to find in the array
     */
    private _findIndexInAnchorArray;
    private _updateAnchorWithXRFrame;
}
