{"version":3,"file":"webXRFeaturesManager.js","sourceRoot":"","sources":["../../../sourceES6/core/XR/webXRFeaturesManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebXRSessionManager } from './webXRSessionManager';\r\nimport { IDisposable } from '../scene';\r\n\r\n/**\r\n * Defining the interface required for a (webxr) feature\r\n */\r\nexport interface IWebXRFeature extends IDisposable {\r\n    /**\r\n     * Is this feature attached\r\n     */\r\n    attached: boolean;\r\n    /**\r\n     * Should auto-attach be disabled?\r\n     */\r\n    disableAutoAttach: boolean;\r\n\r\n    /**\r\n     * Attach the feature to the session\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @param force should attachment be forced (even when already attached)\r\n     * @returns true if successful.\r\n     */\r\n    attach(force?: boolean): boolean;\r\n    /**\r\n     * Detach the feature from the session\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    detach(): boolean;\r\n}\r\n\r\n/**\r\n * A list of the currently available features without referencing them\r\n */\r\nexport class WebXRFeatureName {\r\n    /**\r\n     * The name of the anchor system feature\r\n     */\r\n    public static ANCHOR_SYSTEM = \"xr-anchor-system\";\r\n    /**\r\n     * The name of the background remover feature\r\n     */\r\n    public static BACKGROUND_REMOVER = \"xr-background-remover\";\r\n    /**\r\n     * The name of the hit test feature\r\n     */\r\n    public static HIT_TEST = \"xr-hit-test\";\r\n    /**\r\n     * physics impostors for xr controllers feature\r\n     */\r\n    public static PHYSICS_CONTROLLERS = \"xr-physics-controller\";\r\n    /**\r\n     * The name of the plane detection feature\r\n     */\r\n    public static PLANE_DETECTION = \"xr-plane-detection\";\r\n    /**\r\n     * The name of the pointer selection feature\r\n     */\r\n    public static POINTER_SELECTION = \"xr-controller-pointer-selection\";\r\n    /**\r\n     * The name of the teleportation feature\r\n     */\r\n    public static TELEPORTATION = \"xr-controller-teleportation\";\r\n}\r\n\r\n/**\r\n * Defining the constructor of a feature. Used to register the modules.\r\n */\r\nexport type WebXRFeatureConstructor = (xrSessionManager: WebXRSessionManager, options?: any) => (() => IWebXRFeature);\r\n\r\n/**\r\n * The WebXR features manager is responsible of enabling or disabling features required for the current XR session.\r\n * It is mainly used in AR sessions.\r\n *\r\n * A feature can have a version that is defined by Babylon (and does not correspond with the webxr version).\r\n */\r\nexport class WebXRFeaturesManager implements IDisposable {\r\n    private static readonly _AvailableFeatures: {\r\n        [name: string]: {\r\n            stable: number;\r\n            latest: number;\r\n            [version: number]: WebXRFeatureConstructor;\r\n        }\r\n    } = {};\r\n\r\n    private _features: {\r\n        [name: string]: {\r\n            featureImplementation: IWebXRFeature,\r\n            version: number,\r\n            enabled: boolean\r\n        }\r\n    } = {};\r\n\r\n    /**\r\n     * constructs a new features manages.\r\n     *\r\n     * @param _xrSessionManager an instance of WebXRSessionManager\r\n     */\r\n    constructor(private _xrSessionManager: WebXRSessionManager) {\r\n        // when session starts / initialized - attach\r\n        this._xrSessionManager.onXRSessionInit.add(() => {\r\n            this.getEnabledFeatures().forEach((featureName) => {\r\n                const feature = this._features[featureName];\r\n                if (feature.enabled && !feature.featureImplementation.attached && !feature.featureImplementation.disableAutoAttach) {\r\n                    this.attachFeature(featureName);\r\n                }\r\n            });\r\n        });\r\n\r\n        // when session ends - detach\r\n        this._xrSessionManager.onXRSessionEnded.add(() => {\r\n            this.getEnabledFeatures().forEach((featureName) => {\r\n                const feature = this._features[featureName];\r\n                if (feature.enabled && feature.featureImplementation.attached) {\r\n                    // detach, but don't disable!\r\n                    this.detachFeature(featureName);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Used to register a module. After calling this function a developer can use this feature in the scene.\r\n     * Mainly used internally.\r\n     *\r\n     * @param featureName the name of the feature to register\r\n     * @param constructorFunction the function used to construct the module\r\n     * @param version the (babylon) version of the module\r\n     * @param stable is that a stable version of this module\r\n     */\r\n    public static AddWebXRFeature(featureName: string, constructorFunction: WebXRFeatureConstructor, version: number = 1, stable: boolean = false) {\r\n        this._AvailableFeatures[featureName] = this._AvailableFeatures[featureName] || { latest: version };\r\n        if (version > this._AvailableFeatures[featureName].latest) {\r\n            this._AvailableFeatures[featureName].latest = version;\r\n        }\r\n        if (stable) {\r\n            this._AvailableFeatures[featureName].stable = version;\r\n        }\r\n        this._AvailableFeatures[featureName][version] = constructorFunction;\r\n    }\r\n\r\n    /**\r\n     * Returns a constructor of a specific feature.\r\n     *\r\n     * @param featureName the name of the feature to construct\r\n     * @param version the version of the feature to load\r\n     * @param xrSessionManager the xrSessionManager. Used to construct the module\r\n     * @param options optional options provided to the module.\r\n     * @returns a function that, when called, will return a new instance of this feature\r\n     */\r\n    public static ConstructFeature(featureName: string, version: number = 1, xrSessionManager: WebXRSessionManager, options?: any): (() => IWebXRFeature) {\r\n        const constructorFunction = this._AvailableFeatures[featureName][version];\r\n        if (!constructorFunction) {\r\n            // throw an error? return nothing?\r\n            throw new Error('feature not found');\r\n        }\r\n\r\n        return constructorFunction(xrSessionManager, options);\r\n    }\r\n\r\n    /**\r\n     * Can be used to return the list of features currently registered\r\n     *\r\n     * @returns an Array of available features\r\n     */\r\n    public static GetAvailableFeatures() {\r\n        return Object.keys(this._AvailableFeatures);\r\n    }\r\n\r\n    /**\r\n     * Gets the versions available for a specific feature\r\n     * @param featureName the name of the feature\r\n     * @returns an array with the available versions\r\n     */\r\n    public static GetAvailableVersions(featureName: string) {\r\n        return Object.keys(this._AvailableFeatures[featureName]);\r\n    }\r\n\r\n    /**\r\n     * Return the latest unstable version of this feature\r\n     * @param featureName the name of the feature to search\r\n     * @returns the version number. if not found will return -1\r\n     */\r\n    public static GetLatestVersionOfFeature(featureName: string): number {\r\n        return (this._AvailableFeatures[featureName] && this._AvailableFeatures[featureName].latest) || -1;\r\n    }\r\n\r\n    /**\r\n     * Return the latest stable version of this feature\r\n     * @param featureName the name of the feature to search\r\n     * @returns the version number. if not found will return -1\r\n     */\r\n    public static GetStableVersionOfFeature(featureName: string): number {\r\n        return (this._AvailableFeatures[featureName] && this._AvailableFeatures[featureName].stable) || -1;\r\n    }\r\n\r\n    /**\r\n     * Attach a feature to the current session. Mainly used when session started to start the feature effect.\r\n     * Can be used during a session to start a feature\r\n     * @param featureName the name of feature to attach\r\n     */\r\n    public attachFeature(featureName: string) {\r\n        const feature = this._features[featureName];\r\n        if (feature && feature.enabled && !feature.featureImplementation.attached) {\r\n            feature.featureImplementation.attach();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Can be used inside a session or when the session ends to detach a specific feature\r\n     * @param featureName the name of the feature to detach\r\n     */\r\n    public detachFeature(featureName: string) {\r\n        const feature = this._features[featureName];\r\n        if (feature && feature.featureImplementation.attached) {\r\n            feature.featureImplementation.detach();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used to disable an already-enabled feature\r\n     * The feature will be disposed and will be recreated once enabled.\r\n     * @param featureName the feature to disable\r\n     * @returns true if disable was successful\r\n     */\r\n    public disableFeature(featureName: string | { Name: string }): boolean {\r\n        const name = typeof featureName === 'string' ? featureName : featureName.Name;\r\n        const feature = this._features[name];\r\n        if (feature && feature.enabled) {\r\n            feature.enabled = false;\r\n            this.detachFeature(name);\r\n            feature.featureImplementation.dispose();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * dispose this features manager\r\n     */\r\n    public dispose(): void {\r\n        this.getEnabledFeatures().forEach((feature) => {\r\n            this.disableFeature(feature);\r\n            this._features[feature].featureImplementation.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Enable a feature using its name and a version. This will enable it in the scene, and will be responsible to attach it when the session starts.\r\n     * If used twice, the old version will be disposed and a new one will be constructed. This way you can re-enable with different configuration.\r\n     *\r\n     * @param featureName the name of the feature to load or the class of the feature\r\n     * @param version optional version to load. if not provided the latest version will be enabled\r\n     * @param moduleOptions options provided to the module. Ses the module documentation / constructor\r\n     * @param attachIfPossible if set to true (default) the feature will be automatically attached, if it is currently possible\r\n     * @returns a new constructed feature or throws an error if feature not found.\r\n     */\r\n    public enableFeature(featureName: string | { Name: string }, version: number | string = 'latest', moduleOptions: any = {}, attachIfPossible: boolean = true): IWebXRFeature {\r\n        const name = typeof featureName === 'string' ? featureName : featureName.Name;\r\n        let versionToLoad = 0;\r\n        if (typeof version === 'string') {\r\n            if (!version) {\r\n                throw new Error(`Error in provided version - ${name} (${version})`);\r\n            }\r\n            if (version === 'stable') {\r\n                versionToLoad = WebXRFeaturesManager.GetStableVersionOfFeature(name);\r\n            } else if (version === 'latest') {\r\n                versionToLoad = WebXRFeaturesManager.GetLatestVersionOfFeature(name);\r\n            } else {\r\n                // try loading the number the string represents\r\n                versionToLoad = +version;\r\n            }\r\n            if (versionToLoad === -1 || isNaN(versionToLoad)) {\r\n                throw new Error(`feature not found - ${name} (${version})`);\r\n            }\r\n        } else {\r\n            versionToLoad = version;\r\n        }\r\n        // check if already initialized\r\n        const feature = this._features[name];\r\n        const constructFunction = WebXRFeaturesManager.ConstructFeature(name, versionToLoad, this._xrSessionManager, moduleOptions);\r\n        if (!constructFunction) {\r\n            // report error?\r\n            throw new Error(`feature not found - ${name}`);\r\n        }\r\n\r\n        /* If the feature is already enabled, detach and dispose it, and create a new one */\r\n        if (feature) {\r\n            this.disableFeature(name);\r\n        }\r\n\r\n        this._features[name] = {\r\n            featureImplementation: constructFunction(),\r\n            enabled: true,\r\n            version: versionToLoad\r\n        };\r\n\r\n        if (attachIfPossible) {\r\n            // if session started already, request and enable\r\n            if (this._xrSessionManager.session && !feature.featureImplementation.attached) {\r\n                // enable feature\r\n                this.attachFeature(name);\r\n            }\r\n        } else {\r\n            // disable auto-attach when session starts\r\n            this._features[name].featureImplementation.disableAutoAttach = true;\r\n        }\r\n\r\n        return this._features[name].featureImplementation;\r\n    }\r\n\r\n    /**\r\n     * get the implementation of an enabled feature.\r\n     * @param featureName the name of the feature to load\r\n     * @returns the feature class, if found\r\n     */\r\n    public getEnabledFeature(featureName: string): IWebXRFeature {\r\n        return this._features[featureName] && this._features[featureName].featureImplementation;\r\n    }\r\n\r\n    /**\r\n     * Get the list of enabled features\r\n     * @returns an array of enabled features\r\n     */\r\n    public getEnabledFeatures() {\r\n        return Object.keys(this._features);\r\n    }\r\n}"]}