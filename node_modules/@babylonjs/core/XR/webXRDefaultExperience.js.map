{"version":3,"file":"webXRDefaultExperience.js","sourceRoot":"","sources":["../../../sourceES6/core/XR/webXRDefaultExperience.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebXRExperienceHelper } from \"./webXRExperienceHelper\";\r\nimport { Scene } from '../scene';\r\nimport { WebXRInput, IWebXRInputOptions } from './webXRInput';\r\nimport { WebXRControllerPointerSelection } from './features/WebXRControllerPointerSelection';\r\nimport { WebXRRenderTarget } from './webXRTypes';\r\nimport { WebXREnterExitUI, WebXREnterExitUIOptions } from './webXREnterExitUI';\r\nimport { AbstractMesh } from '../Meshes/abstractMesh';\r\nimport { WebXRManagedOutputCanvasOptions } from './webXRManagedOutputCanvas';\r\nimport { WebXRMotionControllerTeleportation } from './features/WebXRControllerTeleportation';\r\nimport { Logger } from '../Misc/logger';\r\n\r\n/**\r\n * Options for the default xr helper\r\n */\r\nexport class WebXRDefaultExperienceOptions {\r\n    /**\r\n     * Enable or disable default UI to enter XR\r\n     */\r\n    public disableDefaultUI?: boolean;\r\n    /**\r\n     * Should teleportation not initialize. defaults to false.\r\n     */\r\n    public disableTeleportation?: boolean;\r\n    /**\r\n     * Floor meshes that will be used for teleport\r\n     */\r\n    public floorMeshes?: Array<AbstractMesh>;\r\n    /**\r\n     * If set to true, the first frame will not be used to reset position\r\n     * The first frame is mainly used when copying transformation from the old camera\r\n     * Mainly used in AR\r\n     */\r\n    public ignoreNativeCameraTransformation?: boolean;\r\n    /**\r\n     * Disable the controller mesh-loading. Can be used if you want to load your own meshes\r\n     */\r\n    public inputOptions?: IWebXRInputOptions;\r\n    /**\r\n     * optional configuration for the output canvas\r\n     */\r\n    public outputCanvasOptions?: WebXRManagedOutputCanvasOptions;\r\n    /**\r\n     * optional UI options. This can be used among other to change session mode and reference space type\r\n     */\r\n    public uiOptions?: WebXREnterExitUIOptions;\r\n    /**\r\n     * When loading teleportation and pointer select, use stable versions instead of latest.\r\n     */\r\n    public useStablePlugins?: boolean;\r\n}\r\n\r\n/**\r\n * Default experience which provides a similar setup to the previous webVRExperience\r\n */\r\nexport class WebXRDefaultExperience {\r\n    /**\r\n     * Base experience\r\n     */\r\n    public baseExperience: WebXRExperienceHelper;\r\n    /**\r\n     * Enables ui for entering/exiting xr\r\n     */\r\n    public enterExitUI: WebXREnterExitUI;\r\n    /**\r\n     * Input experience extension\r\n     */\r\n    public input: WebXRInput;\r\n    /**\r\n     * Enables laser pointer and selection\r\n     */\r\n    public pointerSelection: WebXRControllerPointerSelection;\r\n    /**\r\n     * Default target xr should render to\r\n     */\r\n    public renderTarget: WebXRRenderTarget;\r\n    /**\r\n     * Enables teleportation\r\n     */\r\n    public teleportation: WebXRMotionControllerTeleportation;\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    /**\r\n     * Creates the default xr experience\r\n     * @param scene scene\r\n     * @param options options for basic configuration\r\n     * @returns resulting WebXRDefaultExperience\r\n     */\r\n    public static CreateAsync(scene: Scene, options: WebXRDefaultExperienceOptions = {}) {\r\n        var result = new WebXRDefaultExperience();\r\n\r\n        // Create base experience\r\n        return WebXRExperienceHelper.CreateAsync(scene).then((xrHelper) => {\r\n            result.baseExperience = xrHelper;\r\n\r\n            if (options.ignoreNativeCameraTransformation) {\r\n                result.baseExperience.camera.compensateOnFirstFrame = false;\r\n            }\r\n\r\n            // Add controller support\r\n            result.input = new WebXRInput(xrHelper.sessionManager, xrHelper.camera, options.inputOptions);\r\n            result.pointerSelection = <WebXRControllerPointerSelection>result.baseExperience.featuresManager.enableFeature(WebXRControllerPointerSelection.Name, options.useStablePlugins ? \"stable\" : \"latest\", {\r\n                xrInput: result.input\r\n            });\r\n\r\n            // Add default teleportation, including rotation\r\n            if (!options.disableTeleportation) {\r\n                result.teleportation = <WebXRMotionControllerTeleportation>result.baseExperience.featuresManager.enableFeature(WebXRMotionControllerTeleportation.Name, options.useStablePlugins ? \"stable\" : \"latest\", {\r\n                    floorMeshes: options.floorMeshes,\r\n                    xrInput: result.input\r\n                });\r\n                result.teleportation.setSelectionFeature(result.pointerSelection);\r\n            }\r\n\r\n            // Create the WebXR output target\r\n            result.renderTarget = result.baseExperience.sessionManager.getWebXRRenderTarget(options.outputCanvasOptions);\r\n\r\n            if (!options.disableDefaultUI) {\r\n                if (options.uiOptions) {\r\n                    options.uiOptions.renderTarget = options.uiOptions.renderTarget || result.renderTarget;\r\n                }\r\n                // Create ui for entering/exiting xr\r\n                return WebXREnterExitUI.CreateAsync(scene, result.baseExperience, options.uiOptions || { renderTarget: result.renderTarget }).then((ui) => {\r\n                    result.enterExitUI = ui;\r\n                });\r\n            } else {\r\n                return;\r\n            }\r\n        }).then(() => {\r\n            return result;\r\n        }).catch((error) => {\r\n            Logger.Error(\"Error initializing XR\");\r\n            Logger.Error(error);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * DIsposes of the experience helper\r\n     */\r\n    public dispose() {\r\n        if (this.baseExperience) {\r\n            this.baseExperience.dispose();\r\n        }\r\n        if (this.input) {\r\n            this.input.dispose();\r\n        }\r\n        if (this.enterExitUI) {\r\n            this.enterExitUI.dispose();\r\n        }\r\n        if (this.renderTarget) {\r\n            this.renderTarget.dispose();\r\n        }\r\n    }\r\n}"]}