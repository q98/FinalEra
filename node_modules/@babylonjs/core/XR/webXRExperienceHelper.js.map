{"version":3,"file":"webXRExperienceHelper.js","sourceRoot":"","sources":["../../../sourceES6/core/XR/webXRExperienceHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { IDisposable, Scene } from \"../scene\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { WebXRSessionManager } from \"./webXRSessionManager\";\r\nimport { WebXRCamera } from \"./webXRCamera\";\r\nimport { WebXRState, WebXRRenderTarget } from './webXRTypes';\r\nimport { WebXRFeaturesManager } from './webXRFeaturesManager';\r\nimport { Logger } from '../Misc/logger';\r\n\r\n/**\r\n * Base set of functionality needed to create an XR experience (WebXRSessionManager, Camera, StateManagement, etc.)\r\n * @see https://doc.babylonjs.com/how_to/webxr\r\n */\r\nexport class WebXRExperienceHelper implements IDisposable {\r\n    private _nonVRCamera: Nullable<Camera> = null;\r\n    private _originalSceneAutoClear = true;\r\n    private _supported = false;\r\n\r\n    /**\r\n     * Camera used to render xr content\r\n     */\r\n    public camera: WebXRCamera;\r\n    /** A features manager for this xr session */\r\n    public featuresManager: WebXRFeaturesManager;\r\n    /**\r\n     * Observers registered here will be triggered after the camera's initial transformation is set\r\n     * This can be used to set a different ground level or an extra rotation.\r\n     *\r\n     * Note that ground level is considered to be at 0. The height defined by the XR camera will be added\r\n     * to the position set after this observable is done executing.\r\n     */\r\n    public onInitialXRPoseSetObservable = new Observable<WebXRCamera>();\r\n    /**\r\n     * Fires when the state of the experience helper has changed\r\n     */\r\n    public onStateChangedObservable = new Observable<WebXRState>();\r\n    /** Session manager used to keep track of xr session */\r\n    public sessionManager: WebXRSessionManager;\r\n    /**\r\n     * The current state of the XR experience (eg. transitioning, in XR or not in XR)\r\n     */\r\n    public state: WebXRState = WebXRState.NOT_IN_XR;\r\n\r\n    /**\r\n     * Creates a WebXRExperienceHelper\r\n     * @param scene The scene the helper should be created in\r\n     */\r\n    private constructor(private scene: Scene) {\r\n        this.sessionManager = new WebXRSessionManager(scene);\r\n        this.camera = new WebXRCamera(\"\", scene, this.sessionManager);\r\n        this.featuresManager = new WebXRFeaturesManager(this.sessionManager);\r\n\r\n        scene.onDisposeObservable.add(() => {\r\n            this.exitXRAsync();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates the experience helper\r\n     * @param scene the scene to attach the experience helper to\r\n     * @returns a promise for the experience helper\r\n     */\r\n    public static CreateAsync(scene: Scene): Promise<WebXRExperienceHelper> {\r\n        var helper = new WebXRExperienceHelper(scene);\r\n        return helper.sessionManager.initializeAsync().then(() => {\r\n            helper._supported = true;\r\n            return helper;\r\n        }).catch((e) => {\r\n            helper._setState(WebXRState.NOT_IN_XR);\r\n            helper.dispose();\r\n            throw e;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disposes of the experience helper\r\n     */\r\n    public dispose() {\r\n        this.camera.dispose();\r\n        this.onStateChangedObservable.clear();\r\n        this.onInitialXRPoseSetObservable.clear();\r\n        this.sessionManager.dispose();\r\n        if (this._nonVRCamera) {\r\n            this.scene.activeCamera = this._nonVRCamera;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters XR mode (This must be done within a user interaction in most browsers eg. button click)\r\n     * @param sessionMode options for the XR session\r\n     * @param referenceSpaceType frame of reference of the XR session\r\n     * @param renderTarget the output canvas that will be used to enter XR mode\r\n     * @returns promise that resolves after xr mode has entered\r\n     */\r\n    public enterXRAsync(sessionMode: XRSessionMode, referenceSpaceType: XRReferenceSpaceType, renderTarget: WebXRRenderTarget = this.sessionManager.getWebXRRenderTarget()): Promise<WebXRSessionManager> {\r\n        if (!this._supported) {\r\n            throw \"WebXR not supported in this browser or environment\";\r\n        }\r\n        this._setState(WebXRState.ENTERING_XR);\r\n        let sessionCreationOptions: XRSessionInit = {\r\n            optionalFeatures: (referenceSpaceType !== \"viewer\" && referenceSpaceType !== \"local\") ? [referenceSpaceType] : []\r\n        };\r\n        // we currently recommend \"local\" space in AR\r\n        if (sessionMode === \"immersive-ar\" && referenceSpaceType !== \"local\") {\r\n            Logger.Warn(\"We recommend using 'local' reference space type when using 'immersive-ar' session mode\");\r\n        }\r\n        // make sure that the session mode is supported\r\n        return this.sessionManager.isSessionSupportedAsync(sessionMode).then((supported) => {\r\n            if (!supported) {\r\n                throw new Error(`Session mode \"${sessionMode}\" not supported in browser`);\r\n            }\r\n            return this.sessionManager.initializeSessionAsync(sessionMode, sessionCreationOptions);\r\n        }).then(() => {\r\n            return this.sessionManager.setReferenceSpaceTypeAsync(referenceSpaceType);\r\n        }).then(() => {\r\n            return renderTarget.initializeXRLayerAsync(this.sessionManager.session);\r\n        }).then(() => {\r\n            return this.sessionManager.updateRenderStateAsync({ depthFar: this.camera.maxZ, depthNear: this.camera.minZ, baseLayer: renderTarget.xrLayer! });\r\n        }).then(() => {\r\n            // run the render loop\r\n            this.sessionManager.runXRRenderLoop();\r\n            // Cache pre xr scene settings\r\n            this._originalSceneAutoClear = this.scene.autoClear;\r\n            this._nonVRCamera = this.scene.activeCamera;\r\n\r\n            // Overwrite current scene settings\r\n            this.scene.autoClear = false;\r\n\r\n            this.scene.activeCamera = this.camera;\r\n            // do not compensate when AR session is used\r\n            if (sessionMode !== 'immersive-ar') {\r\n                this._nonXRToXRCamera();\r\n            } else {\r\n                this.camera.compensateOnFirstFrame = false;\r\n            }\r\n\r\n            this.sessionManager.onXRSessionEnded.addOnce(() => {\r\n                // Reset camera rigs output render target to ensure sessions render target is not drawn after it ends\r\n                this.camera.rigCameras.forEach((c) => {\r\n                    c.outputRenderTarget = null;\r\n                });\r\n\r\n                // Restore scene settings\r\n                this.scene.autoClear = this._originalSceneAutoClear;\r\n                this.scene.activeCamera = this._nonVRCamera;\r\n                if (sessionMode !== 'immersive-ar' && this.camera.compensateOnFirstFrame) {\r\n                    if ((<any>this._nonVRCamera).setPosition) {\r\n                        (<any>this._nonVRCamera).setPosition(this.camera.position);\r\n                    } else {\r\n                        this._nonVRCamera!.position.copyFrom(this.camera.position);\r\n                    }\r\n                }\r\n\r\n                this._setState(WebXRState.NOT_IN_XR);\r\n            });\r\n\r\n            // Wait until the first frame arrives before setting state to in xr\r\n            this.sessionManager.onXRFrameObservable.addOnce(() => {\r\n                this._setState(WebXRState.IN_XR);\r\n            });\r\n\r\n            return this.sessionManager;\r\n        }).catch((e: any) => {\r\n            console.log(e);\r\n            console.log(e.message);\r\n            this._setState(WebXRState.NOT_IN_XR);\r\n            throw (e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Exits XR mode and returns the scene to its original state\r\n     * @returns promise that resolves after xr mode has exited\r\n     */\r\n    public exitXRAsync() {\r\n        this._setState(WebXRState.EXITING_XR);\r\n        return this.sessionManager.exitXRAsync();\r\n    }\r\n\r\n    private _nonXRToXRCamera() {\r\n        this.camera.setTransformationFromNonVRCamera(this._nonVRCamera!);\r\n        this.onInitialXRPoseSetObservable.notifyObservers(this.camera);\r\n    }\r\n\r\n    private _setState(val: WebXRState) {\r\n        if (this.state === val) {\r\n            return;\r\n        }\r\n        this.state = val;\r\n        this.onStateChangedObservable.notifyObservers(this.state);\r\n    }\r\n}\r\n"]}