import { __extends } from "tslib";
import { TransformNode } from "../Meshes/transformNode";
import { Mesh } from "../Meshes/mesh";
import { Texture } from "../Materials/Textures/texture";
import { VideoTexture } from "../Materials/Textures/videoTexture";
import { BackgroundMaterial } from "../Materials/Background/backgroundMaterial";
import "../Meshes/Builders/sphereBuilder";
import { Vector3 } from '../Maths/math.vector';
import { Axis } from '../Maths/math';
import { SphereBuilder } from '../Meshes/Builders/sphereBuilder';
/**
 * Display a 360/180 degree video on an approximately spherical surface, useful for VR applications or skyboxes.
 * As a subclass of TransformNode, this allow parenting to the camera or multiple videos with different locations in the scene.
 * This class achieves its effect with a VideoTexture and a correctly configured BackgroundMaterial on an inverted sphere.
 * Potential additions to this helper include zoom and and non-infinite distance rendering effects.
 */
var VideoDome = /** @class */ (function (_super) {
    __extends(VideoDome, _super);
    /**
     * Create an instance of this class and pass through the parameters to the relevant classes, VideoTexture, StandardMaterial, and Mesh.
     * @param name Element's name, child elements will append suffixes for their own names.
     * @param urlsOrVideo defines the url(s) or the video element to use
     * @param options An object containing optional or exposed sub element properties
     */
    function VideoDome(name, urlsOrVideo, options, scene) {
        var _this = _super.call(this, name, scene) || this;
        _this._halfDome = false;
        _this._useDirectMapping = false;
        _this._videoMode = VideoDome.MODE_MONOSCOPIC;
        /**
         * Oberserver used in Stereoscopic VR Mode.
         */
        _this._onBeforeCameraRenderObserver = null;
        scene = _this.getScene();
        // set defaults and manage values
        name = name || "videoDome";
        options.resolution = (Math.abs(options.resolution) | 0) || 32;
        options.clickToPlay = Boolean(options.clickToPlay);
        options.autoPlay = options.autoPlay === undefined ? true : Boolean(options.autoPlay);
        options.loop = options.loop === undefined ? true : Boolean(options.loop);
        options.size = Math.abs(options.size) || (scene.activeCamera ? scene.activeCamera.maxZ * 0.48 : 1000);
        if (options.useDirectMapping === undefined) {
            _this._useDirectMapping = true;
        }
        else {
            _this._useDirectMapping = options.useDirectMapping;
        }
        if (options.faceForward === undefined) {
            options.faceForward = true;
        }
        _this._setReady(false);
        // create
        var tempOptions = { loop: options.loop, autoPlay: options.autoPlay, autoUpdateTexture: true, poster: options.poster };
        var material = _this._material = new BackgroundMaterial(name + "_material", scene);
        var texture = _this._videoTexture = new VideoTexture(name + "_texture", urlsOrVideo, scene, false, _this._useDirectMapping, Texture.TRILINEAR_SAMPLINGMODE, tempOptions);
        _this._mesh = Mesh.CreateSphere(name + "_mesh", options.resolution, options.size, scene, false, Mesh.BACKSIDE);
        texture.anisotropicFilteringLevel = 1;
        texture.onLoadObservable.addOnce(function () {
            _this._setReady(true);
        });
        // configure material
        material.useEquirectangularFOV = true;
        material.fovMultiplier = 1.0;
        material.opacityFresnel = false;
        if (_this._useDirectMapping) {
            texture.wrapU = Texture.CLAMP_ADDRESSMODE;
            texture.wrapV = Texture.CLAMP_ADDRESSMODE;
            material.diffuseTexture = texture;
        }
        else {
            texture.coordinatesMode = Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE; // matches orientation
            texture.wrapV = Texture.CLAMP_ADDRESSMODE;
            material.reflectionTexture = texture;
        }
        // configure mesh
        _this._mesh.material = material;
        _this._mesh.parent = _this;
        // create a (disabled until needed) mask to cover unneeded segments of 180 videos.
        _this._halfDomeMask = SphereBuilder.CreateSphere("", { slice: 0.5, diameter: options.size * 0.99, segments: options.resolution, sideOrientation: Mesh.BACKSIDE }, scene);
        _this._halfDomeMask.rotate(Axis.X, -Math.PI / 2);
        // set the parent, so it will always be positioned correctly AND will be disposed when the main sphere is disposed
        _this._halfDomeMask.parent = _this._mesh;
        _this._halfDome = !!options.halfDomeMode;
        // enable or disable according to the settings
        _this._halfDomeMask.setEnabled(_this._halfDome);
        // optional configuration
        if (options.clickToPlay) {
            scene.onPointerUp = function () {
                _this._videoTexture.video.play();
            };
        }
        // Initial rotation
        if (options.faceForward && scene.activeCamera) {
            var camera = scene.activeCamera;
            var forward = Vector3.Forward();
            var direction = Vector3.TransformNormal(forward, camera.getViewMatrix());
            direction.normalize();
            _this.rotation.y = Math.acos(Vector3.Dot(forward, direction));
        }
        return _this;
    }
    Object.defineProperty(VideoDome.prototype, "videoTexture", {
        /**
         * Gets the video texture being displayed on the sphere
         */
        get: function () {
            return this._videoTexture;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VideoDome.prototype, "fovMultiplier", {
        /**
         * The current fov(field of view) multiplier, 0.0 - 2.0. Defaults to 1.0. Lower values "zoom in" and higher values "zoom out".
         * Also see the options.resolution property.
         */
        get: function () {
            return this._material.fovMultiplier;
        },
        set: function (value) {
            this._material.fovMultiplier = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VideoDome.prototype, "videoMode", {
        /**
         * Gets or set the current video mode for the video. It can be:
         * * VideoDome.MODE_MONOSCOPIC : Define the video source as a Monoscopic panoramic 360 video.
         * * VideoDome.MODE_TOPBOTTOM  : Define the video source as a Stereoscopic TopBottom/OverUnder panoramic 360 video.
         * * VideoDome.MODE_SIDEBYSIDE : Define the video source as a Stereoscopic Side by Side panoramic 360 video.
         */
        get: function () {
            return this._videoMode;
        },
        set: function (value) {
            if (this._videoMode === value) {
                return;
            }
            this._changeVideoMode(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VideoDome.prototype, "halfDome", {
        /**
         * Is the video a 180 degrees video (half dome) or 360 video (full dome)
         *
         */
        get: function () {
            return this._halfDome;
        },
        /**
         * Set the halfDome mode. If set, only the front (180 degrees) will be displayed and the back will be blacked out.
         */
        set: function (enabled) {
            this._halfDome = enabled;
            this._halfDomeMask.setEnabled(enabled);
        },
        enumerable: true,
        configurable: true
    });
    VideoDome.prototype._changeVideoMode = function (value) {
        var _this = this;
        this._scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);
        this._videoMode = value;
        // Default Setup and Reset.
        this._videoTexture.uScale = 1;
        this._videoTexture.vScale = 1;
        this._videoTexture.uOffset = 0;
        this._videoTexture.vOffset = 0;
        switch (value) {
            case VideoDome.MODE_SIDEBYSIDE:
                // in half-dome mode the uScale should be double of 360 videos
                // Use 0.99999 to boost perf by not switching program
                this._videoTexture.uScale = this._halfDome ? 0.99999 : 0.5;
                var rightOffset_1 = this._halfDome ? 0.0 : 0.5;
                var leftOffset_1 = this._halfDome ? 0.5 : 0.0;
                this._onBeforeCameraRenderObserver = this._scene.onBeforeCameraRenderObservable.add(function (camera) {
                    _this._videoTexture.uOffset = camera.isRightCamera ? rightOffset_1 : leftOffset_1;
                });
                break;
            case VideoDome.MODE_TOPBOTTOM:
                // in half-dome mode the vScale should be double of 360 videos
                // Use 0.99999 to boost perf by not switching program
                this._videoTexture.vScale = this._halfDome ? 0.99999 : 0.5;
                this._onBeforeCameraRenderObserver = this._scene.onBeforeCameraRenderObservable.add(function (camera) {
                    _this._videoTexture.vOffset = camera.isRightCamera ? 0.5 : 0.0;
                });
                break;
        }
    };
    /**
     * Releases resources associated with this node.
     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)
     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)
     */
    VideoDome.prototype.dispose = function (doNotRecurse, disposeMaterialAndTextures) {
        if (disposeMaterialAndTextures === void 0) { disposeMaterialAndTextures = false; }
        this._videoTexture.dispose();
        this._mesh.dispose();
        this._material.dispose();
        this._scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);
        _super.prototype.dispose.call(this, doNotRecurse, disposeMaterialAndTextures);
    };
    /**
     * Define the video source as a Monoscopic panoramic 360 video.
     */
    VideoDome.MODE_MONOSCOPIC = 0;
    /**
     * Define the video source as a Stereoscopic TopBottom/OverUnder panoramic 360 video.
     */
    VideoDome.MODE_TOPBOTTOM = 1;
    /**
     * Define the video source as a Stereoscopic Side by Side panoramic 360 video.
     */
    VideoDome.MODE_SIDEBYSIDE = 2;
    return VideoDome;
}(TransformNode));
export { VideoDome };
//# sourceMappingURL=videoDome.js.map