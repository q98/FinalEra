import { Observable } from "../Misc/observable";
import { Nullable } from "../types";
import { Scene } from "../scene";
import { TransformNode } from "../Meshes/transformNode";
import { Mesh } from "../Meshes/mesh";
import { Texture } from "../Materials/Textures/texture";
import { BackgroundMaterial } from "../Materials/Background/backgroundMaterial";
import "../Meshes/Builders/sphereBuilder";
/**
 * Display a 360 degree photo on an approximately spherical surface, useful for VR applications or skyboxes.
 * As a subclass of TransformNode, this allow parenting to the camera with different locations in the scene.
 * This class achieves its effect with a Texture and a correctly configured BackgroundMaterial on an inverted sphere.
 * Potential additions to this helper include zoom and and non-infinite distance rendering effects.
 */
export declare class PhotoDome extends TransformNode {
    /**
     * Define the image as a Monoscopic panoramic 360 image.
     */
    static readonly MODE_MONOSCOPIC = 0;
    /**
     * Define the image as a Stereoscopic TopBottom/OverUnder panoramic 360 image.
     */
    static readonly MODE_TOPBOTTOM = 1;
    /**
     * Define the image as a Stereoscopic Side by Side panoramic 360 image.
     */
    static readonly MODE_SIDEBYSIDE = 2;
    private _useDirectMapping;
    /**
     * The texture being displayed on the sphere
     */
    protected _photoTexture: Texture;
    /**
     * Gets or sets the texture being displayed on the sphere
     */
    get photoTexture(): Texture;
    set photoTexture(value: Texture);
    /**
     * Observable raised when an error occured while loading the 360 image
     */
    onLoadErrorObservable: Observable<string>;
    /**
     * The skybox material
     */
    protected _material: BackgroundMaterial;
    /**
     * The surface used for the skybox
     */
    protected _mesh: Mesh;
    /**
     * Gets the mesh used for the skybox.
     */
    get mesh(): Mesh;
    /**
     * The current fov(field of view) multiplier, 0.0 - 2.0. Defaults to 1.0. Lower values "zoom in" and higher values "zoom out".
     * Also see the options.resolution property.
     */
    get fovMultiplier(): number;
    set fovMultiplier(value: number);
    private _imageMode;
    /**
     * Gets or set the current video mode for the video. It can be:
     * * PhotoDome.MODE_MONOSCOPIC : Define the image as a Monoscopic panoramic 360 image.
     * * PhotoDome.MODE_TOPBOTTOM  : Define the image as a Stereoscopic TopBottom/OverUnder panoramic 360 image.
     * * PhotoDome.MODE_SIDEBYSIDE : Define the image as a Stereoscopic Side by Side panoramic 360 image.
     */
    get imageMode(): number;
    set imageMode(value: number);
    /**
     * Create an instance of this class and pass through the parameters to the relevant classes, Texture, StandardMaterial, and Mesh.
     * @param name Element's name, child elements will append suffixes for their own names.
     * @param urlsOfPhoto defines the url of the photo to display
     * @param options defines an object containing optional or exposed sub element properties
     * @param onError defines a callback called when an error occured while loading the texture
     */
    constructor(name: string, urlOfPhoto: string, options: {
        resolution?: number;
        size?: number;
        useDirectMapping?: boolean;
        faceForward?: boolean;
    }, scene: Scene, onError?: Nullable<(message?: string, exception?: any) => void>);
    private _onBeforeCameraRenderObserver;
    private _changeImageMode;
    /**
     * Releases resources associated with this node.
     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)
     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)
     */
    dispose(doNotRecurse?: boolean, disposeMaterialAndTextures?: boolean): void;
}
